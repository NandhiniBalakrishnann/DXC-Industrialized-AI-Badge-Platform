

[{"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\index.js":"1","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\reportWebVitals.js":"2","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\App.js":"3","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\CreateBadgeForm.js":"4","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\RegistrationForm.js":"5","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\LoginForm.js":"6","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\CertificatePublicLinkForm.js":"7","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\LandingForm.js":"8","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ForgotPasswordForm.js":"9","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\RegistrationAPI.js":"10","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\LoginAPI.js":"11","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\CreateBadgeAPI.js":"12","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AssertionDetailsByIdAPI.js":"13","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\scripts\\functions.js":"14","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddJIRARequestAPI.js":"15","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UserDetailsByEmailAPI.js":"16","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\SendPasswordResetEmailAPI.js":"17","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\MyBackpackForm.js":"18","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewProfileForm.js":"19","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewUsersForm.js":"20","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewAssertionsForm.js":"21","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewBadgeForm.js":"22","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\MyBackpackAPI.js":"23","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\MyBackpackDetailsForm.js":"24","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ModifyUsersAPI.js":"25","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewUsersAPI.js":"26","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\AssertionDetailsForm.js":"27","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\AddUserForm.js":"28","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\UserDetailsForm.js":"29","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewAssertionsAPI.js":"30","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewAssertionForReviewersAPI.js":"31","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\BadgeDetailsForm.js":"32","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewBadgeAPI.js":"33","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddLinkedInCertificateAPI.js":"34","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateUserDetailsAPI.js":"35","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateUserBadgeStatusAPI.js":"36","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddNewUserAPI.js":"37","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddNewAssertionAPI.js":"38","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateBadgeAPI.js":"39","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\BadgeDetailsByNameAPI.js":"40","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateAssertionAPI.js":"41","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\index.js":"42","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\reportWebVitals.js":"43","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\App.js":"44","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\LoginForm.js":"45","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\RegistrationForm.js":"46","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\CreateBadgeForm.js":"47","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\CertificatePublicLinkForm.js":"48","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ForgotPasswordForm.js":"49","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\LandingForm.js":"50","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\LoginAPI.js":"51","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\RegistrationAPI.js":"52","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\CreateBadgeAPI.js":"53","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AssertionDetailsByIdAPI.js":"54","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\scripts\\functions.js":"55","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\SendPasswordResetEmailAPI.js":"56","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddJIRARequestAPI.js":"57","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UserDetailsByEmailAPI.js":"58","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\MyBackpackForm.js":"59","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewUsersForm.js":"60","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewProfileForm.js":"61","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewBadgeForm.js":"62","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewAssertionsForm.js":"63","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\MyBackpackAPI.js":"64","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\MyBackpackDetailsForm.js":"65","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewUsersAPI.js":"66","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\UserDetailsForm.js":"67","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\AssertionDetailsForm.js":"68","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\AddUserForm.js":"69","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ModifyUsersAPI.js":"70","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewBadgeAPI.js":"71","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\BadgeDetailsForm.js":"72","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewAssertionForReviewersAPI.js":"73","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewAssertionsAPI.js":"74","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddLinkedInCertificateAPI.js":"75","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateUserDetailsAPI.js":"76","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateUserBadgeStatusAPI.js":"77","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddNewUserAPI.js":"78","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateAssertionAPI.js":"79","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddNewAssertionAPI.js":"80","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateBadgeAPI.js":"81","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\BadgeDetailsByNameAPI.js":"82"},{"size":517,"mtime":1627585893481,"results":"83","hashOfConfig":"84"},{"size":375,"mtime":1627585893482,"results":"85","hashOfConfig":"84"},{"size":702,"mtime":1627585893416,"results":"86","hashOfConfig":"84"},{"size":7349,"mtime":1627585893462,"results":"87","hashOfConfig":"84"},{"size":9419,"mtime":1627585893473,"results":"88","hashOfConfig":"84"},{"size":7191,"mtime":1627585893467,"results":"89","hashOfConfig":"84"},{"size":8075,"mtime":1627585893461,"results":"90","hashOfConfig":"84"},{"size":13713,"mtime":1627585893466,"results":"91","hashOfConfig":"84"},{"size":3371,"mtime":1627585893463,"results":"92","hashOfConfig":"84"},{"size":978,"mtime":1627585893403,"results":"93","hashOfConfig":"84"},{"size":930,"mtime":1627585893397,"results":"94","hashOfConfig":"84"},{"size":1189,"mtime":1627585893396,"results":"95","hashOfConfig":"84"},{"size":1121,"mtime":1627585893393,"results":"96","hashOfConfig":"84"},{"size":243,"mtime":1627585893484,"results":"97","hashOfConfig":"84"},{"size":1289,"mtime":1627585893388,"results":"98","hashOfConfig":"84"},{"size":1032,"mtime":1627585893411,"results":"99","hashOfConfig":"84"},{"size":960,"mtime":1627585893404,"results":"100","hashOfConfig":"84"},{"size":5400,"mtime":1627585893469,"results":"101","hashOfConfig":"84"},{"size":12593,"mtime":1627585893478,"results":"102","hashOfConfig":"84"},{"size":5692,"mtime":1627585893479,"results":"103","hashOfConfig":"84"},{"size":6898,"mtime":1627585893476,"results":"104","hashOfConfig":"84"},{"size":5124,"mtime":1627585893477,"results":"105","hashOfConfig":"84"},{"size":905,"mtime":1627585893402,"results":"106","hashOfConfig":"84"},{"size":12685,"mtime":1627585893468,"results":"107","hashOfConfig":"84"},{"size":928,"mtime":1627585893400,"results":"108","hashOfConfig":"84"},{"size":989,"mtime":1627585893415,"results":"109","hashOfConfig":"84"},{"size":16887,"mtime":1627585893458,"results":"110","hashOfConfig":"84"},{"size":14378,"mtime":1627585893455,"results":"111","hashOfConfig":"84"},{"size":14973,"mtime":1627585893474,"results":"112","hashOfConfig":"84"},{"size":1008,"mtime":1627585893413,"results":"113","hashOfConfig":"84"},{"size":1087,"mtime":1627585893413,"results":"114","hashOfConfig":"84"},{"size":30044,"mtime":1627585893460,"results":"115","hashOfConfig":"84"},{"size":991,"mtime":1627585893414,"results":"116","hashOfConfig":"84"},{"size":339,"mtime":1627585893389,"results":"117","hashOfConfig":"84"},{"size":1331,"mtime":1627585893408,"results":"118","hashOfConfig":"84"},{"size":1177,"mtime":1627585893407,"results":"119","hashOfConfig":"84"},{"size":1086,"mtime":1627585893391,"results":"120","hashOfConfig":"84"},{"size":1382,"mtime":1627585893390,"results":"121","hashOfConfig":"84"},{"size":1441,"mtime":1627585893406,"results":"122","hashOfConfig":"84"},{"size":1115,"mtime":1627585893395,"results":"123","hashOfConfig":"84"},{"size":1255,"mtime":1627585893405,"results":"124","hashOfConfig":"84"},{"size":517,"mtime":1627585893481,"results":"125","hashOfConfig":"126"},{"size":375,"mtime":1627585893482,"results":"127","hashOfConfig":"126"},{"size":702,"mtime":1627585893416,"results":"128","hashOfConfig":"126"},{"size":7191,"mtime":1627585893467,"results":"129","hashOfConfig":"126"},{"size":9419,"mtime":1627585893473,"results":"130","hashOfConfig":"126"},{"size":7349,"mtime":1627585893462,"results":"131","hashOfConfig":"126"},{"size":8075,"mtime":1627585893461,"results":"132","hashOfConfig":"126"},{"size":3371,"mtime":1627585893463,"results":"133","hashOfConfig":"126"},{"size":13713,"mtime":1627585893466,"results":"134","hashOfConfig":"126"},{"size":930,"mtime":1627585893397,"results":"135","hashOfConfig":"126"},{"size":978,"mtime":1627585893403,"results":"136","hashOfConfig":"126"},{"size":1189,"mtime":1627585893396,"results":"137","hashOfConfig":"126"},{"size":1121,"mtime":1627585893393,"results":"138","hashOfConfig":"126"},{"size":243,"mtime":1627585893484,"results":"139","hashOfConfig":"126"},{"size":960,"mtime":1627585893404,"results":"140","hashOfConfig":"126"},{"size":1289,"mtime":1627585893388,"results":"141","hashOfConfig":"126"},{"size":1032,"mtime":1627585893411,"results":"142","hashOfConfig":"126"},{"size":5400,"mtime":1627585893469,"results":"143","hashOfConfig":"126"},{"size":5692,"mtime":1627585893479,"results":"144","hashOfConfig":"126"},{"size":12593,"mtime":1627585893478,"results":"145","hashOfConfig":"126"},{"size":5124,"mtime":1627585893477,"results":"146","hashOfConfig":"126"},{"size":6898,"mtime":1627585893476,"results":"147","hashOfConfig":"126"},{"size":905,"mtime":1627585893402,"results":"148","hashOfConfig":"126"},{"size":12685,"mtime":1627585893468,"results":"149","hashOfConfig":"126"},{"size":989,"mtime":1627585893415,"results":"150","hashOfConfig":"126"},{"size":14973,"mtime":1627585893474,"results":"151","hashOfConfig":"126"},{"size":16887,"mtime":1627585893458,"results":"152","hashOfConfig":"126"},{"size":14378,"mtime":1627585893455,"results":"153","hashOfConfig":"126"},{"size":928,"mtime":1627585893400,"results":"154","hashOfConfig":"126"},{"size":991,"mtime":1627585893414,"results":"155","hashOfConfig":"126"},{"size":30044,"mtime":1627585893460,"results":"156","hashOfConfig":"126"},{"size":1087,"mtime":1627585893413,"results":"157","hashOfConfig":"126"},{"size":1008,"mtime":1627585893413,"results":"158","hashOfConfig":"126"},{"size":339,"mtime":1627585893389,"results":"159","hashOfConfig":"126"},{"size":1331,"mtime":1627585893408,"results":"160","hashOfConfig":"126"},{"size":1177,"mtime":1627585893407,"results":"161","hashOfConfig":"126"},{"size":1086,"mtime":1627585893391,"results":"162","hashOfConfig":"126"},{"size":1255,"mtime":1627585893405,"results":"163","hashOfConfig":"126"},{"size":1382,"mtime":1627585893390,"results":"164","hashOfConfig":"126"},{"size":1441,"mtime":1627585893406,"results":"165","hashOfConfig":"126"},{"size":1115,"mtime":1627585893395,"results":"166","hashOfConfig":"126"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},"1y4gvqf",{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"169"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"169"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"169"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"169"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"169"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"169"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"169"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"169"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"169"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"169"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"169"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"169"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"169"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"169"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"169"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"169"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"169"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"169"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"169"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f4v8nj",{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"280","messages":"281","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"312","messages":"313","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\index.js",[],["352","353"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\reportWebVitals.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\App.js",["354","355","356"],"import React from 'react';\r\nimport LoginForm from './forms/LoginForm';\r\nimport RegistrationForm from './forms/RegistrationForm';\r\nimport CreateBadgeForm from './forms/CreateBadgeForm';\r\nimport CertificateForm from '../src/forms/CertificatePublicLinkForm';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n    <Router>\r\n    <div>\r\n      {/* <LoginForm /> */}\r\n      {/* <CreateBadgeForm /> */}\r\n      <Switch>\r\n          <Route path=\"/:assertionId\" children={<CertificateForm />} />\r\n          <Route path=\"\" children={<LoginForm/>}/>\r\n      </Switch>\r\n    </div>\r\n    </Router>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\CreateBadgeForm.js",["357","358","359","360","361","362","363"],"// import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport getCreateBadgeResponse from '../API/CreateBadgeAPI'\r\nimport RegistrationForm from './RegistrationForm';\r\n\r\nconst CreateBadgeForm = (props) => {\r\n\r\n    const [badgeName, setBadgeName] = useState('');\r\n    const [badgeDescription, setBadgeDescription] = useState('');\r\n    const [badgeLink, setBadgeLink] = useState('');\r\n    const [reviewer, setReviewer] = useState('');\r\n    const [evidence, setEvidence] = useState('True');\r\n    const [owner, setOwner] = useState('');\r\n    const [badgeIcon, setBadgeIcon] = useState('');\r\n    const [userRequestable, setUserRequestable] = useState('True');\r\n    const [badgeType, setBadgeType] = useState('Open Badge');\r\n\r\n    // const [mandatoryBadgeName, setMandatoryBadgeName] = useState('');\r\n\r\n    const [createBadgeResponse, setCreateBadgeResponse] = useState('');\r\n\r\n    const handleBadgeName = event => {\r\n        setBadgeName(event.target.value);\r\n\r\n    };\r\n\r\n    const handleBadgeDescription = event => {\r\n        setBadgeDescription(event.target.value);\r\n\r\n    };\r\n\r\n    const handleBadgeLink = event => {\r\n        setBadgeLink(event.target.value);\r\n\r\n    };\r\n\r\n    const handleReviewer = event => {\r\n        setReviewer(event.target.value);\r\n\r\n    };\r\n\r\n    const handleEvidence = event => {\r\n        setEvidence(event.target.value);\r\n\r\n    };\r\n\r\n    const handleOwner = event => {\r\n        setOwner(event.target.value);\r\n\r\n    };\r\n    const handleUserRequestable = event => {\r\n        setUserRequestable(event.target.value);\r\n\r\n    };\r\n    const handleBadgeType = event => {\r\n        setBadgeType(event.target.value);\r\n\r\n    };\r\n\r\n    const handleBadgeIcon = event => {\r\n        setBadgeIcon(event.target.files[0]);\r\n    }\r\n\r\n    const ImageThumb = ({ image }) => {\r\n        return <img src={URL.createObjectURL(image)} alt={image.name} />;\r\n      };\r\n\r\n    const handleCreateBadge = async () => {\r\n\r\n        if(badgeName==''||badgeDescription==''||badgeLink==''||owner==''||reviewer=='')\r\n        {\r\n            // if(badgeName=='')\r\n            // setMandatoryBadgeName('Enter badge name')\r\n            setCreateBadgeResponse('Please fill all mandatory fields');\r\n        }\r\n        else{\r\n        var response = new Promise((resolve, reject) => {\r\n            resolve(getCreateBadgeResponse(badgeName, badgeDescription, badgeLink, userRequestable, badgeType, owner, reviewer, badgeIcon.name ,evidence));\r\n        }).then(value => {\r\n            // setPassword('');\r\n            setCreateBadgeResponse(value);\r\n\r\n\r\n        }\r\n        );\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Name *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"badgeName\"\r\n                    value={badgeName}\r\n                    onChange={handleBadgeName}\r\n                />\r\n               {/* <label>{mandatoryBadgeName}</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */}\r\n            </div>\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Description *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"badgeDescription\"\r\n                    value={badgeDescription}\r\n                    onChange={handleBadgeDescription}\r\n                />\r\n                \r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Link *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"badgeLink\"\r\n                    value={badgeLink}\r\n                    onChange={handleBadgeLink}\r\n                />\r\n\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> User Requestable</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <select\r\n                    data-testid=\"userRequestable\"\r\n                    value={userRequestable}\r\n                    onChange={handleUserRequestable}>\r\n                        <option value='True'>\r\n                            True\r\n                        </option>\r\n                        <option value='False'>\r\n                            False\r\n                        </option>\r\n                </select>\r\n\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Type</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <select\r\n                    data-testid=\"badgeType\"\r\n                    value={badgeType}                    \r\n                    onChange={handleBadgeType}>\r\n                         <option value='Open Badge'>\r\n                    Open Badge\r\n                </option>\r\n                <option value='Community Badge'>\r\n                    Community Badge\r\n                </option>\r\n                    </select>                   \r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Evidence *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              \r\n                <select\r\n                     data-testid=\"evidence\"\r\n                     value={evidence}\r\n                     onChange={handleEvidence}>\r\n                        <option value='True'>\r\n                            True\r\n                        </option>\r\n                        <option value='False'>\r\n                            False\r\n                        </option>\r\n                </select>\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Owner *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"owner\"\r\n                    value={owner}\r\n                    onChange={handleOwner}\r\n                />\r\n\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Reviewer *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"reviewer\"\r\n                    value={reviewer}\r\n                    onChange={handleReviewer}\r\n                />\r\n            </div>\r\n\r\n           \r\n\r\n            <br></br>\r\n            <div id=\"upload-box\">\r\n                <input type=\"file\"\r\n                    onChange={handleBadgeIcon}\r\n                    data-testid=\"badgeIcon\"\r\n                />\r\n            <br></br><br></br>\r\n            {badgeIcon && <ImageThumb image={badgeIcon} />}\r\n            </div>\r\n\r\n            <br></br>\r\n            <button data-testid=\"createBadgeButton\" onClick={handleCreateBadge}  >\r\n                Create Badge\r\n            </button>\r\n            <br></br>\r\n\r\n            <input\r\n                type=\"text\"\r\n                data-testid=\"createBadgeResponse\"\r\n                value={createBadgeResponse}\r\n                hidden\r\n                readOnly\r\n            />\r\n\r\n            <label>\r\n                {createBadgeResponse}\r\n            </label>\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\nexport default CreateBadgeForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\RegistrationForm.js",["364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384"],"import React, { useState, Text } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\nconst RegistrationForm = () => {\r\n\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [middleName, SetMiddleName] = useState('');\r\n  const [organizationName, SetOrganizationName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [response, setresponse] = useState('');\r\n  const [firstNameClick,setFirstNameClick] = useState('False');\r\n  const [lastNameClick,setLastNameClick] = useState('False');\r\n  const [emailClick,setEmailClick] = useState('False');\r\n  const [passClick,setPassClick] = useState('False');\r\n  const [confPassClick,setConfPassClick] = useState('False');\r\n\r\n\r\n\r\n\r\n  const handleFirstNameChange = event => {\r\n    setFirstName(event.target.value);\r\n  };\r\n  const handleMiddleNameChange = event => {\r\n    SetMiddleName(event.target.value);\r\n  };\r\n  const handleLastNameChange = event => {\r\n    setLastName(event.target.value);\r\n  };\r\n  const handleOrganizationNameChange = event => {\r\n    SetOrganizationName(event.target.value);\r\n  };\r\n  const handleEmailChange = event => {\r\n    setEmail(event.target.value);\r\n  };\r\n  const handlePasswordChange = event => {\r\n    setPassword(event.target.value);\r\n  };\r\n  const handleConfirmPasswordChange = event => {\r\n    setConfirmPassword(event.target.value);\r\n\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleLogin = event => {\r\n    setresponse('login');\r\n  };\r\n\r\n  const handleRegistration = () => {\r\n    setFirstNameClick('True');\r\n    setLastNameClick('True');\r\n    setEmailClick('True');\r\n    setPassClick('True');\r\n    setConfPassClick('True');\r\n    \r\n    if (password != confirmPassword) {\r\n      setresponse('Password Mismatch');\r\n      setPassword('');\r\n      setConfirmPassword('');\r\n    }\r\n    else {\r\n      var response = new Promise((resolve, reject) => {\r\n        resolve(getRegistrationResponse(email, password,firstName,lastName,organizationName));\r\n      }).then(value => {\r\n        setresponse(value);\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setPassword('');\r\n\r\n  }\r\n  if (response == 'login') {\r\n    return (\r\n      <div>\r\n        <LoginForm />\r\n\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    if (response == 'registered') {\r\n      return (\r\n        <div>\r\n          <LoginForm result={'Registration Successful! Kindly Login!'} />\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign up\r\n        </Typography>\r\n            {/* <form className={classes.form} noValidate> */}\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  autoComplete=\"fname\"\r\n                  name=\"firstName\"\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"firstName\"\r\n                  label=\"First Name\"\r\n                  className={((firstName.length=='')&& (firstNameClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"firstName\",\r\n                  }}\r\n                  value={firstName}\r\n                  onChange={handleFirstNameChange}\r\n                  autoFocus\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"lastName\"\r\n                  label=\"Last Name\"\r\n                  name=\"lastName\"\r\n                  autoComplete=\"lname\"\r\n                  className={((lastName.length=='')&& (lastNameClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"lastName\",\r\n                  }}\r\n                  value={lastName}\r\n                  onChange={handleLastNameChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  \r\n                  fullWidth\r\n                  id=\"organization\"\r\n                  label=\"Organization Name\"\r\n                  name=\"organization\"\r\n                  autoComplete=\"organization\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"organizationName\",\r\n                  }}\r\n                  value={organizationName}\r\n                  onChange={handleOrganizationNameChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"emailID\",\r\n                  }}\r\n                  value={email}\r\n                  onChange={handleEmailChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  className={((password.length=='')&& (passClick=='True')) ? 'emptyfield' : ''}\r\n                  id=\"password\"\r\n                  // autoComplete=\"current-password\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"password\",\r\n                  }}\r\n                  value={password}\r\n                  onChange={handlePasswordChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"confirmpassword\"\r\n                  label=\"Confirm Password\"\r\n                  type=\"password\"\r\n                  className={((confirmPassword.length=='')&& (confPassClick=='True')) ? 'emptyfield' : ''}\r\n                  id=\"confirmpassword\"\r\n                  // autoComplete=\"current-password\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"confirmPassword\",\r\n                  }}\r\n\r\n                  value={confirmPassword}\r\n                  onChange={handleConfirmPasswordChange}\r\n                />\r\n              </Grid>\r\n              {/* <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n              />\r\n            </Grid> */}\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"registerButton\" onClick={handleRegistration}>\r\n              Sign Up\r\n\r\n          </Button>\r\n            <Grid container justify=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"#\" variant=\"body2\"\r\n                  data-testid=\"loginButton\" onClick={handleLogin}>\r\n                  Already have an account? Sign in\r\n              </Link>\r\n              </Grid>\r\n            </Grid>\r\n            <input type=\"text\"\r\n              data-testid=\"response\"\r\n              hidden\r\n              readOnly\r\n              value={response} />\r\n            <label>{response}</label>\r\n            {/* </form> */}\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default RegistrationForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\LoginForm.js",["385","386","387","388","389","390","391","392","393","394","395","396","397","398","399"],"// import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport getLoginResponse from '../API/LoginAPI'\r\nimport RegistrationForm from './RegistrationForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport LandingForm from './LandingForm';\r\nimport ForgotPasswordForm from  './ForgotPasswordForm';\r\nimport formatTimeStamp from '../scripts/functions'\r\nimport formatDate from '../scripts/functions';\r\n// import '../index.css'; \r\n\r\nconst LoginForm = (props) => {\r\n    const [email, setEmail] = useState('');\r\n    const [emailClick,setEmailClick] = useState('False');\r\n    const [passwordClick,setPasswordClick] = useState('False');\r\n    const [password, setPassword] = useState('');\r\n    const [result, setResult] = useState(props.result);\r\n    const [registration, setRegistration] = useState('');\r\n    const [forgotPassword, setForgotPassword] = useState('');\r\n\r\n    const handlePasswordChange = event => {\r\n        setPassword(event.target.value);\r\n    };\r\n\r\n    const handleEmailChange = event => {\r\n        setEmail(event.target.value);\r\n    };\r\n\r\n    const handleRegister = event => {\r\n        setRegistration('register');\r\n    };\r\n\r\n    const handleForgotPassword = event => {\r\n      setForgotPassword('forgotpassword');\r\n    };\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n          marginTop: theme.spacing(8),\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        },\r\n        avatar: {\r\n          margin: theme.spacing(1),\r\n          backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n          width: '100%', // Fix IE 11 issue.\r\n          marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n          margin: theme.spacing(3, 0, 2),\r\n        },\r\n      }));\r\n\r\n      const classes = useStyles();\r\n\r\n    const handleLogin = async () => {\r\n        setEmailClick('True');\r\n        setPasswordClick('True');\r\n        var response = new Promise((resolve, reject) => {\r\n            resolve(getLoginResponse(email, password));\r\n        }).then(value => {\r\n            setPassword('');\r\n            setResult(value)\r\n        }\r\n        );\r\n    }\r\n    \r\n    if(result == '5f760d3425c1036d4d46655f' || result == '5f760d4325c1036d4d466560' || result == '5fc5567fcd831cc0c83774b8')\r\n    {\r\n        return (\r\n            <div>\r\n                <LandingForm userType={result} email={email}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    else{\r\n\r\n    \r\n    if (registration == 'register') {\r\n        return (\r\n            <div>\r\n                <RegistrationForm />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    else{    \r\n      if (forgotPassword == 'forgotpassword') {\r\n          return (\r\n              <div>\r\n                  <ForgotPasswordForm />\r\n              </div>\r\n          );\r\n      }\r\n   \r\n    else {\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n            {/* <div>Here{process.env.REACT_APP_APILINK}</div> */}\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in \r\n              </Typography>\r\n              {/* <form className={classes.form} noValidate> */}\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\r\n                  autoComplete=\"email\"\r\n                  autoFocus\r\n                    inputProps={{\r\n                        \"data-testid\": \"loginId\",\r\n                    }}\r\n                    // data-testid=\"loginId\"\r\n                    value={email}\r\n                    onChange={handleEmailChange}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  className={((password.length=='')&& (passwordClick=='True'))  ? 'emptyfield' : ''}\r\n                  autoComplete=\"current-password\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"password\",\r\n                }}\r\n                    \r\n                    value={password}\r\n                    onChange={handlePasswordChange}\r\n                />\r\n                {/* <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                /> */}\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  data-testid=\"loginButton\" \r\n                  \r\n                  onClick={handleLogin}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                <Grid container>\r\n                  <Grid item xs>\r\n                    <Link href=\"#\" variant=\"body2\"\r\n                    data-testid=\"forgotPasswordButton\" \r\n                    onClick={handleForgotPassword}>\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Link href=\"#\" variant=\"body2\" \r\n                    data-testid=\"registerButton\" \r\n                    onClick={handleRegister}>\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n                <input\r\n                    type=\"text\"\r\n                    data-testid=\"result\"\r\n                    value={result}\r\n                    hidden\r\n                    readOnly\r\n                />\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    data-testid=\"registration\"\r\n                    value={registration}\r\n                    hidden\r\n                    readOnly\r\n                />\r\n                <label>\r\n                    {result}\r\n                </label>\r\n              </div>\r\n\r\n</Container>\r\n        );\r\n    }\r\n}\r\n}\r\n};\r\n\r\n\r\n\r\nexport default LoginForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\CertificatePublicLinkForm.js",["400","401","402","403","404","405","406","407","408","409","410","411","412","413","414"],"import React, {useState, Text, useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport LabelImportantIcon from '@material-ui/icons/LabelImportant';\r\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\r\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI';\r\nimport formatDate from '../scripts/functions';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n\r\n  useParams\r\n} from \"react-router-dom\";\r\nconst CertificateForm = () => {\r\n  // const [assertionId, setAssertionId] = useState(props.assertionId);\r\n  const [badgeName, setBadgeName] = useState('');\r\n  const [badgeRecipient, setBadgeRecipient] = useState('');\r\n  const [badgeDescription, setBadgeDescription] = useState('');\r\n  const [publicImage, setPublicImage]=useState('');\r\n  let { assertionId } = useParams();\r\n  const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\r\n    const useStyles = makeStyles((theme) => ({\r\n      root: {\r\n        height: '100vh',\r\n      },\r\n      root1: {\r\n        maxWidth: 345,\r\n      },\r\n      media: {\r\n        height: '80vh',\r\n      },\r\n      mediasub: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '70%',\r\n        width:'70%',\r\n        marginLeft:80,\r\n      },\r\n      image: {\r\n        backgroundImage: 'url(image)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n          theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n      },\r\n      paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      },\r\n      paper1: {\r\n        margin: theme.spacing(5, 3),\r\n        display: 'inline',\r\n        // flexDirection: 'column',\r\n        textAlign: 'left',\r\n      },\r\n      avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.success.main,\r\n      },\r\n      form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n      },\r\n      submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n      },\r\n    }));\r\n\r\n    const handleviewAssertionById = async () => {\r\n\r\n      var response1 = new Promise((resolve, reject) => {\r\n          resolve(getAssertionDetailByIdResponse(assertionId));\r\n      }).then(value => {\r\n          if (value != undefined) {\r\n             \r\n              setBadgeName(value[0].badge_details[0].name);\r\n              setBadgeRecipient(value[0].user_details[0].email);\r\n              setBadgeDescription(value[0].badge_details[0].description);\r\n              setPublicImage(value[0].badge_details[0].icon);\r\n              if(value[0].issuedOn!=null)\r\n                  setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\r\n              \r\n          }\r\n\r\n\r\n      });\r\n\r\n  }\r\n    useEffect(() => {\r\n    \r\n      if(assertionId!=null)\r\n        handleviewAssertionById()\r\n    }, []);\r\n      const classes = useStyles();\r\n\r\n  \r\n    \r\n    \r\n        return (\r\n      \r\n          <Grid container component=\"main\" className={classes.root}>\r\n          <CssBaseline />\r\n          <Grid item xs={false} sm={4} md={5} className={classes.image} >\r\n            <div>\r\n            <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image=\"/static/images/white-background.jpg\"\r\n          title=\"Contemporary Background\"\r\n        >\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <CardMedia \r\n          className={classes.mediasub} \r\n          id=\"publiclink_iconImage\"\r\n          data-testid=\"publiclink_iconImage\"\r\n          \r\n          image={publicImage}\r\n          title=\"Badge Icon\"\r\n        />\r\n          \r\n        </CardMedia>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          DXC Industrialized AI Badge Platform\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Experiment, Experience and Evolve your AI Skills.\r\n            <br/>\r\n           <a href=\"https://industrialized-ai-starter.azurewebsites.net/\">\r\n            https://industrialized-ai-starter.azurewebsites.net/\r\n            </a>\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n   \r\n    </Card>\r\n            </div>\r\n            </Grid>\r\n          <Grid item xs={12} sm={8} md={7} component={Paper} elevation={6} square>\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <CardMembershipIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Badge Issued\r\n              </Typography>\r\n              <br/>\r\n              \r\n              <form className={classes.form} noValidate>\r\n  \r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n            \r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Recipient\"\r\n                  name=\"email\"\r\n                  \r\n                  value={badgeRecipient}\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_recipient\",\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  \r\n                  fullWidth\r\n                  name=\"Name\"\r\n                  label=\"Badge Name\"\r\n                  value={badgeName}\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_name\",\r\n                  }}\r\n                  \r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  value={badgeDescription}\r\n                  fullWidth\r\n                  multiline\r\n                  name=\"Description\"\r\n                  label=\"Badge Description\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_description\",\r\n                  }}\r\n                  \r\n                  \r\n                />\r\n\r\n            <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  \r\n                  fullWidth\r\n                  name=\"IssuedOn\"\r\n                  label=\"Issued On\"\r\n                  value={badgeIssuedOn}\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_issuedOn\",\r\n                  }}\r\n                  \r\n                />\r\n\r\n<TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  \r\n                  fullWidth\r\n                  name=\"Issuer\"\r\n                  label=\"Issuer\"\r\n                  value=\"DXC Technology\"\r\n                  \r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_issuedBy\",\r\n                  }}\r\n                />\r\n               \r\n              </form>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default CertificateForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\LandingForm.js",["415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"import React, { useDebugValue, useState, useEffect} from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\n//import ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\r\nimport LocalMallIcon from '@material-ui/icons/LocalMall'\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport CreateBadgeForm from './CreateBadgeForm';\r\nimport logo from '../assets/Tables-charts-graphs.mp4';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ViewBadgeForm from './ViewBadgeForm';\r\nimport ViewAssertionsForm from './ViewAssertionsForm';\r\nimport ViewProfileForm from './ViewProfileForm';\r\nimport ViewUsersForm from './ViewUsersForm';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MyBackpackForm from './MyBackpackForm';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport ReactPlayer from 'react-player';\r\n// import $ from 'jquery'; \r\nimport getJIRAResponse from '../API/AddJIRARequestAPI';\r\n \r\nconst LandingForm = (props)=>\r\n{\r\n    const [clickedItem,setClickedItem] = useState('');\r\n    const windowWidth = window.screen.width;\r\n    const drawerWidth = 220;\r\n    const [userType,setUserType] = useState(props.userType);\r\n    const [email,setEmail] = useState(props.email);\r\n    const [userID,setuserID] = useState('');\r\n\r\n    const handleCreateBadgeButtonClick =()=>{\r\n        setClickedItem('CreateBadgeForm');\r\n    }\r\n\r\n    const handleDashboardButtonClick =()=>{\r\n        setClickedItem('');\r\n    }\r\n\r\n    const handleMyBackpackButtonClick =() =>\r\n    {\r\n      setClickedItem('MyBackpackForm');\r\n    }\r\n\r\n    const handleViewbadgeButtonClick =()=>{\r\n      setClickedItem('ViewBadgeForm');\r\n    }\r\n\r\n    const handleViewAssertionsButtonClick =()=> {\r\n      setClickedItem('ViewAssertionsForm');\r\n    }\r\n\r\n    const handleViewUsersButtonClick =()=> {\r\n      setClickedItem('ViewUsersForm');\r\n    }\r\n\r\n    const handleUpdateProfileButtonClick =()=> {\r\n      setClickedItem('ViewProfileForm');\r\n    }\r\n\r\n\r\n    const handleSupportButtonClick =()=> {\r\n      \r\n      var response = new Promise((resolve, reject) => {\r\n        resolve(getJIRAResponse());\r\n    }).then(value => {\r\n       window.close();\r\n    }\r\n    );\r\n\r\n    }\r\n\r\n   \r\n    const useStylesBootstrap = makeStyles((theme) => ({\r\n      arrow: {\r\n        color: theme.palette.common.black,\r\n      },\r\n      tooltip: {\r\n        backgroundColor: theme.palette.common.black,\r\n      },\r\n    }));\r\n\r\n   \r\n    function BootstrapTooltip(props) {\r\n      const classes = useStylesBootstrap();\r\n    \r\n      return <Tooltip arrow classes={classes} {...props} />;\r\n    }\r\n\r\n    const mainListItems = (\r\n        <div>\r\n          <ListItem button data-testid=\"LandingForm_DashboardButton\" onClick={handleDashboardButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Dashboard\"><DashboardIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Dashboard\" />\r\n          </ListItem>\r\n          <ListItem button data-testid=\"LandingForm_viewMyBackpackButton\" onClick={handleMyBackpackButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"My Backpack\"><LocalMallIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"My Backpack\" />\r\n          </ListItem>\r\n          <ListItem button data-testid=\"LandingForm_viewBadgeButton\" onClick={handleViewbadgeButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Badges\"><PeopleIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Badges\" />\r\n          </ListItem>\r\n          {/* <ListItem button component=\"a\" href=\"mailto:panoply@dxc.com\"> */}\r\n          <ListItem button id=\"LandingForm_feedbackButton\" onClick={handleSupportButtonClick}>\r\n          \r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Support\"><BarChartIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Support\"/>\r\n          </ListItem>\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"FAQ\"><LayersIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"FAQ\" />\r\n          </ListItem>\r\n          <ListItem button id=\"LandingForm_updateProfile\" onClick={handleUpdateProfileButtonClick}>\r\n          \r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Profile\"><PersonIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Profile\"/>\r\n          </ListItem>\r\n        </div>\r\n      );\r\n\r\n      const secondaryListItems = (\r\n        <div data-testid=\"adminSection\">\r\n          <ListSubheader inset>Administration Tasks</ListSubheader>\r\n          \r\n          <ListItem button data-testid=\"LandingForm_createBadgeButton\" onClick={handleCreateBadgeButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Create Badge\"><AddToPhotosIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Create Badge\" />\r\n          </ListItem>\r\n          <ListItem button data-testid=\"LandingForm_viewAssertionsButton\" onClick={handleViewAssertionsButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Assertions\"><AssignmentIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Assertions\" />\r\n          </ListItem>\r\n          <ListItem button data-testid=\"LandingForm_viewUsersButton\" onClick={handleViewUsersButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"User Management\"><FaceIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"User Management\" />\r\n          </ListItem>\r\n        </div>\r\n      );\r\n\r\n      const reviewerListItems = (\r\n        <div data-testid=\"reviewerSection\">\r\n          <ListSubheader inset>Reviewer Tasks</ListSubheader>\r\n          <ListItem button data-testid=\"LandingForm_reviewerAssertionsButton\" onClick={handleViewAssertionsButtonClick}>\r\n            <ListItemIcon>\r\n            <BootstrapTooltip title =\"Assertions\"><AssignmentIcon /></BootstrapTooltip>\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Assertions\" />\r\n          </ListItem>\r\n      \r\n        </div>\r\n      );\r\n\r\n\r\n   \r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: '0 8px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: 'none',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: 'relative',\r\n    whiteSpace: 'nowrap',\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: 'hidden',\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n    // paddingLeft: theme.spacing(1),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 'auto',\r\n    width: `calc(${windowWidth}px - ${drawerWidth}px - ${45}px)`,\r\n  },\r\n  images:{\r\n    height:510,\r\n    width: 755\r\n  },\r\n}));\r\n\r\nconst classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  \r\n  const handleviewUserByEmail = async () => {\r\n        \r\n    var response1 = new Promise((resolve, reject) => {\r\n        resolve(UserDetailByEmailResponse(email));\r\n    }).then(value => {\r\n        if (value != undefined) {\r\n            setuserID(value[0]._id.$oid);\r\n\r\n        }\r\n\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewUserByEmail();\r\n  \r\n}, []);\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        \r\n        <div>\r\n        <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n          DXC Industrialized AI Badge Platform\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>{mainListItems}</List>\r\n        <Divider />\r\n        {userType=='5f760d4325c1036d4d466560'?<List>{secondaryListItems}</List>:userType=='5fc5567fcd831cc0c83774b8'?<List>{reviewerListItems}</List>:<List></List>}        \r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={8} lg={9}>\r\n              <Paper className={fixedHeightPaper}>\r\n               {clickedItem=='ViewUsersForm'?(<ViewUsersForm userID={userID}/>):\r\n               (clickedItem=='ViewAssertionsForm'?(<ViewAssertionsForm email={email} userType={userType} userID={userID}/>):\r\n               (clickedItem=='ViewBadgeForm'?(<ViewBadgeForm userType={userType} userID={userID}/>):\r\n               (clickedItem=='CreateBadgeForm'? (<CreateBadgeForm />):\r\n               (clickedItem=='MyBackpackForm'? (<MyBackpackForm userID={userID}/>):\r\n               (clickedItem=='ViewProfileForm'? (<ViewProfileForm email={email} userID={userID} />):\r\n               (<div>\r\n                 <ReactPlayer url={logo} data-testid=\"DashboardForm_Logo\" playing loop />\r\n                 {/* <video preload='auto' autoplay muted data-testid='DashboardForm_Logo' className={classes.images}>\r\n                   <source src={logo} type=\"video/mp4\"></source>\r\n                   </video> */}\r\n                 </div>))))))}\r\n              </Paper>\r\n            </Grid>\r\n          \r\n            </Grid>\r\n         \r\n        </Container>\r\n      </main>\r\n    </div>\r\n            <input\r\n            data-testid = \"landingID\"\r\n            value = {email}\r\n            hidden>\r\n            </input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LandingForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ForgotPasswordForm.js",["432","433","434","435"],"import React, { useState, Text } from 'react';\r\nimport getForgotPasswordResponse from '../API/SendPasswordResetEmailAPI';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst ForgotPasswordForm = () => {\r\n\r\n  const [email, setEmail] = useState('');\r\n  const [response, setresponse] = useState('');\r\n  const [emailClick,setEmailClick] = useState('False');\r\n\r\n\r\n  const handleEmailChange = event => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleForgotPassword = () => {\r\n        setEmailClick('True');\r\n        var response = new Promise((resolve, reject) => {\r\n        resolve(getForgotPasswordResponse(email));\r\n      }).then(value => {\r\n        setresponse(value);\r\n      });\r\n    }\r\n\r\n      return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Forgot Password\r\n        </Typography>\r\n        <br></br>\r\n            {/* <form className={classes.form} noValidate> */}\r\n            <Grid container spacing={2}>\r\n             <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"emailID\",\r\n                  }}\r\n                  value={email}\r\n                  onChange={handleEmailChange}\r\n                />\r\n              </Grid>\r\n\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"forgotPasswordButton\" onClick={handleForgotPassword}>\r\n              Submit\r\n\r\n          </Button>\r\n\r\n            <input type=\"text\"\r\n              data-testid=\"response\"\r\n              hidden\r\n              readOnly\r\n              value={response} />\r\n            <label>{response}</label>\r\n          </div>\r\n        </Container>\r\n      );\r\n    \r\n  \r\n};\r\n\r\nexport default ForgotPasswordForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\RegistrationAPI.js",["436"],"const getRegistrationResponse = async(username, password,firstName,lastName,organization) => {\r\n    //GET request\r\n    var url = process.env.REACT_APP_APILINK+'/register?email=' + username + '&password=' + password+'&userType=regular'+'&firstName='+firstName+'&secondName='+lastName+'&organizationName='+organization;\r\n    return await fetch(url, {\r\n            method: 'GET',\r\n            //Request Type\r\n        })\r\n        .then((response) => response.text())\r\n        //If response is in json then in success\r\n        .then((responseText) => {\r\n            //Success\r\n            // alert(JSON.stringify(responseJson));\r\n            console.log(responseText);\r\n            return responseText;\r\n        })\r\n        //If response is not in json then in error\r\n        .catch((error) => {\r\n            //Error\r\n            // alert(JSON.stringify(error));\r\n            console.error(error);\r\n            return error;\r\n        });\r\n}\r\n\r\nexport default getRegistrationResponse;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\LoginAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\CreateBadgeAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AssertionDetailsByIdAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\scripts\\functions.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddJIRARequestAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UserDetailsByEmailAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\SendPasswordResetEmailAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\MyBackpackForm.js",["437","438","439","440","441","442","443","444"],"import React,{useEffect, useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CameraIcon from '@material-ui/icons/PhotoCamera';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport getMyBackpackResponse from '../API/MyBackpackAPI';\r\nimport MyBackpackDetailsForm from './MyBackpackDetailsForm';\r\n\r\nconst MyBackpackForm = (props) => {\r\n\r\n\r\nconst [response, setresponse] = useState('0');\r\nconst [userID,setuserID] = useState(props.userID);\r\nconst [mybackpackDetailsClick, setMybackpackDetailsClick] = useState('false');\r\nconst [clickedAssertion, setClickedAssertion] = useState('');\r\n\r\nfunction createData(i, id, badgeName, badgeIcon) {\r\n  return {i, id, badgeName, badgeIcon };\r\n}\r\n\r\nconst [rows, setrows] = useState([]);\r\n\r\nconst handleMybackpackAssertionButton = event => {\r\n  setMybackpackDetailsClick('true');\r\n  setClickedAssertion(event.currentTarget.value);\r\n  //alert(event.currentTarget.value);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n    width: '60%',\r\n    height: '60%',   \r\n    marginLeft:'20%' ,\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\n      \r\n  const handleviewBackpackAssertions = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getMyBackpackResponse(userID));\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setresponse(value.length);\r\n        // alert(value);\r\n        const temp_rows = []\r\n        for (var i = 0; i < value.length; i++) {\r\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].badge_name[0].name,value[i].badge_name[0].icon));\r\n\r\n        }\r\n\r\n        setrows(temp_rows);\r\n      }\r\n    });\r\n  }\r\n\r\n \r\n      useEffect(() => {\r\n        handleviewBackpackAssertions()\r\n    }, []);\r\n      \r\n      const cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n      const classes = useStyles();\r\n\r\nif (mybackpackDetailsClick == 'true') { return (<div><MyBackpackDetailsForm assertionId={clickedAssertion} /></div>); }\r\nelse {\r\n  return (\r\n    \r\n    <div>\r\n      <input data-testid='viewMyBackpack_RowCount' hidden value={response} />\r\n        <input data-testid='viewMyBackpack_badgeName' hidden value={response} />\r\n        <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          {/* <CameraIcon className={classes.icon} /> */}\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Backpack\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        \r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          \r\n          <Grid container spacing={4}>\r\n            {rows.map((row) => (\r\n              <Grid item key={row.i} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image= {row.badgeIcon}     \r\n                    data-testid={'viewMyBackpack_Icon'+row.i}                  \r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                                       \r\n                    {/* <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                     {row.badgeName}\r\n                    </Typography> */}\r\n                    <Typography>\r\n                      <div data-testid={'viewMyBackpack_BadgeName'+row.i} key={row.i} >\r\n                      {row.badgeName.toUpperCase()}\r\n                      </div>\r\n                    </Typography>\r\n                  </CardContent>\r\n                   <CardActions>\r\n                    <Button size=\"small\" color=\"primary\"                      \r\n                      data-testid={'viewMybackpack_assertionsButton'+row.i}\r\n                      value={row.id}\r\n                      onClick={handleMybackpackAssertionButton}>\r\n                        View\r\n                    </Button>\r\n                    {/* <Button size=\"small\" color=\"primary\">\r\n                      Edit\r\n                    </Button> */}\r\n                  </CardActions> \r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n   \r\n    </React.Fragment>\r\n    </div>\r\n  );\r\n                  }\r\n};\r\n\r\nexport default MyBackpackForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewProfileForm.js",["445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport ViewUserForm from '../forms/ViewUsersForm';\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { InputLabel } from '@material-ui/core';\r\nimport getModifiedUsersResponse from '../API/ModifyUsersAPI';\r\nimport LandingForm from './LandingForm';\r\n\r\n\r\nconst ViewProfileForm = (props) => {\r\n\r\n    const [email, setEmail] = useState(props.email);\r\n    const [userType, setUserType] = useState('');\r\n    const [userStatus, setUserStatus] = useState('');\r\n    const [created, setCreated] = useState('');\r\n    const [lastmodified, setLastModified] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [organizationName, setOrganizationName] = useState('');\r\n    const [userId, setUserId] = useState(props.userID);\r\n\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleviewUserByEmail = async () => {\r\n        \r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(UserDetailByEmailResponse(email));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setUserType(value[0].user_type_details[0].type);\r\n                setUserStatus(value[0].user_status_details[0].userStatus);\r\n                // _id.$oid\r\n                setCreated(formatDate(value[0].created.$date));\r\n                setLastModified(formatDate(value[0].modified.$date));\r\n                setFirstName(value[0].firstName);\r\n                setLastName(value[0].secondName);\r\n                setMiddleName(value[0].middleName);\r\n                setOrganizationName(value[0].organizationName);\r\n          \r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleSaveProfile = () => {\r\n        var response2 = new Promise((resolve, reject) => {\r\n            resolve(getModifiedUsersResponse(userId,firstName, lastName, middleName, organizationName));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewUserByEmail()\r\n    }, []);\r\n\r\n    const handleUserTypeChange = event => {\r\n        setUserType(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleUserStatusChange = event => {\r\n        setUserStatus(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleFirstNameChange = event => {\r\n        setFirstName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleMiddleNameChange = event => {\r\n        setMiddleName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleLastNameChange = event => {\r\n        setLastName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleOrganizationNameChange = event => {\r\n        setOrganizationName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n  \r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <LandingForm userID={userId} userType={userType} email={email}/>\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper} data-testid=\"viewProfile_ID\">\r\n                <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Edit Profile Details\r\n      </Typography>\r\n                <br></br>\r\n         \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            name=\"email\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"viewProfile_email\"\r\n                            label=\"Email\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_email\",\r\n                            }}\r\n                            value={email}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    <TextField\r\n                            name=\"userType\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"viewProfile_userType\"\r\n                            label=\"User Type\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_userType\",\r\n                            }}\r\n                            value={userType}\r\n                        />\r\n                    \r\n\r\n                    </Grid> \r\n\r\n                    <Grid item xs={12}>\r\n                    <TextField\r\n                            name=\"userStatus\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"viewProfile_userStatus\"\r\n                            label=\"userStatus\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_userStatus\",\r\n                            }}\r\n                            value={userStatus}\r\n                        />\r\n                    </Grid>                     \r\n           \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"viewProfile_created\"\r\n                            label=\"Created Date\"\r\n                            name=\"created\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_created\",\r\n                            }}\r\n                            value={created}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"viewProfile_lastModified\"\r\n                            label=\"Last Modified\"\r\n                            name=\"lastModified\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_lastModified\",\r\n                            }}\r\n                            value={lastmodified}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"firstName\"\r\n                            label=\"First Name\"\r\n                            id=\"viewProfile_firstName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_firstName\",\r\n                            }}\r\n                            value={firstName}\r\n                            onChange={handleFirstNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"middlename\"\r\n                            label=\"Middle Name\"\r\n                            id=\"viewProfile_middleName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_middleName\",\r\n                            }}\r\n                            value={middleName}\r\n                            onChange={handleMiddleNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            id=\"viewProfile_lastName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_lastName\",\r\n                            }}\r\n                            value={lastName}\r\n                            onChange={handleLastNameChange}\r\n                        />\r\n                    </Grid>\r\n                   \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"organizationName\"\r\n                            label=\"Organization Name\"\r\n                            id=\"viewProfile_organizationName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"viewProfile_organizationName\",\r\n                            }}\r\n                            value={organizationName}\r\n                            onChange={handleOrganizationNameChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"viewProfile_saveButton\"\r\n                            onClick={handleSaveProfile}\r\n                            >\r\n                            Save\r\n                 </Button>\r\n                    </Grid>\r\n                    {/* <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"viewProfile_backButton\" \r\n                            onClick={handleBackButtonClick}\r\n                            >\r\n                            Back\r\n                    </Button>\r\n                    </Grid> */}\r\n                </Grid>\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden readOnly data-testid='viewProfile_Result' value={result} />\r\n            </div>\r\n        </Container>\r\n    );\r\n                        }\r\n};\r\n\r\nexport default ViewProfileForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewUsersForm.js",["469","470","471","472","473","474","475","476","477","478"],"import React, { useState, Text, useEffect } from 'react';\r\nimport ViewUsersResponse from '../API/ViewUsersAPI';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport formatDate from '../scripts/functions';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AssertionDetailsForm from './AssertionDetailsForm';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport UserDetailsForm from './UserDetailsForm';\r\nimport AddUserForm from './AddUserForm';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n\r\nconst ViewUsersForm = (props) => {\r\n\r\n\r\n  const [response, setresponse] = useState('0');\r\n  const [userDetailClick, setUserDetailClick] = useState('false');\r\n  const [clickedUser, setClickedUser] = useState('');\r\n  const [addUserButtonClick, setAddUserButtonClick] = useState('false');\r\n  const [userID, setUserID]=useState(props.userID)\r\n\r\n  function createData(id, mongoId, email, userType, userStatus, createdDate, lastModified, firstName, lastName, middleName, organizationName) {\r\n    return { id, mongoId, email, userType, userStatus, createdDate, lastModified, firstName, lastName, middleName, organizationName};\r\n  }\r\n\r\n  const [rows, setrows] = useState([]);\r\n  // //   const [passwordClick,setPasswordClick] = useState('False');\r\n\r\n  const handleUserDetails = event => {\r\n    setUserDetailClick('true');\r\n    setClickedUser(event.currentTarget.value);\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleAddUserButton = () =>{\r\n    setAddUserButtonClick('true');\r\n  }\r\n\r\n\r\n  const handleviewUsers = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(ViewUsersResponse());\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setresponse(value.length);\r\n        const temp_rows = []\r\n        for (var i = 0; i < value.length; i++) {\r\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].email, value[i].user_type_details[0].type, value[i].user_status_details[0].userStatus, value[i].created.$date, value[i].modified.$date, value[i].firstName, value[i].secondName, value[i].middleName, value[i].organizationName));\r\n        }\r\n\r\n        setrows(temp_rows);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewUsers()\r\n  }, []);\r\n\r\nif (addUserButtonClick =='true') { return (<div><AddUserForm/></div>);}\r\nelse{\r\n  if (userDetailClick == 'true') { return (<div><UserDetailsForm email={clickedUser} userID={userID}/></div>); }\r\n  else {\r\n\r\n    return (\r\n      <div>\r\n        \r\n        \r\n        <input data-testid='viewUsers_RowCount' hidden value={response} />\r\n\r\n        <React.Fragment>\r\n                <Box mx=\"auto\" ml={6} className={classes.root}>\r\n                <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<PersonAddIcon/>}\r\n                data-testid=\"viewUsers_addUserButton\"\r\n                onClick={handleAddUserButton}\r\n                >\r\n                Add New User\r\n                </Button>\r\n                </Box>\r\n\r\n\r\n                <br></br>\r\n          <Table size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell data-testid='viewUsers_email'>Email</TableCell>\r\n                <TableCell>User Type</TableCell>\r\n                <TableCell>User Status</TableCell>\r\n                <TableCell>Created</TableCell>\r\n                <TableCell>Last Modified</TableCell>\r\n                <TableCell>First Name</TableCell>\r\n                <TableCell>Middle Name</TableCell>\r\n                <TableCell>Last Name</TableCell>\r\n                <TableCell>Organization Name</TableCell>\r\n                <TableCell align=\"right\">Options</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow data-testid={'viewUsers_RowID' + row.id} key={row.id} >\r\n\r\n                  <TableCell></TableCell>\r\n\r\n                  <TableCell>{row.email}</TableCell>\r\n                  <TableCell >{row.userType}</TableCell>\r\n                  <TableCell>{row.userStatus}</TableCell>\r\n                  <TableCell>{formatDate(row.createdDate)}</TableCell>\r\n                  <TableCell>{formatDate(row.lastModified)}</TableCell>\r\n                  <TableCell>{row.firstName}</TableCell>\r\n                  <TableCell >{row.middleName}</TableCell>\r\n                  <TableCell>{row.lastName}</TableCell>\r\n                  <TableCell>{row.organizationName}</TableCell>\r\n                  \r\n                  <TableCell align=\"right\">\r\n                    <IconButton data-testid={'viewUsers_editUserButton' + row.id} value={row.email} onClick={handleUserDetails}>\r\n                      <EditSharpIcon />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </React.Fragment>\r\n      </div >\r\n\r\n    );\r\n }\r\n}\r\n};\r\n\r\nexport default ViewUsersForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewAssertionsForm.js",["479","480","481","482","483","484","485","486","487","488","489","490","491"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getViewAssertionsResponse from '../API/ViewAssertionsAPI';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport formatDate from '../scripts/functions';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AssertionDetailsForm from './AssertionDetailsForm';\r\nimport getViewAssertionsForReviewersResponse from '../API/ViewAssertionForReviewersAPI'\r\n\r\nconst ViewAssertionsForm = (props) => {\r\n\r\n\r\n  const [response, setresponse] = useState('0');\r\n  const [assertionDetailClick, setAssertionDetailClick] = useState('false');\r\n  const [clickedAssertion, setClickedAssertion] = useState('0');\r\n  const [email , setEmail] = useState(props.email);\r\n  const [userType,setUserType]=useState(props.userType);\r\n  const [userID,setUserID]=useState(props.userID);\r\n\r\n  function createData(id, mongoId, user, badgeName, issuedOn, status) {\r\n    return { id, mongoId, user, badgeName, issuedOn, status };\r\n  }\r\n\r\n  const [rows, setrows] = useState([]);\r\n  // //   const [passwordClick,setPasswordClick] = useState('False');\r\n\r\n  const handleAssertionDetails = event => {\r\n    setAssertionDetailClick('true');\r\n    setClickedAssertion(event.currentTarget.value);\r\n\r\n    //\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  const handleviewAssertions = async () => {\r\n    if (userType=='5fc5567fcd831cc0c83774b8'){\r\n      var response1 = new Promise((resolve, reject) => {\r\n        resolve(getViewAssertionsForReviewersResponse(userID));\r\n      }).then(value => {\r\n        if (value != undefined) {\r\n          setresponse(value.length);\r\n          const temp_rows = []\r\n          for (var i = 0; i < value.length; i++) {\r\n            temp_rows.push(createData(i, value[i]._id.$oid, value[i].user_email_address[0].email, value[i].badge_details[0].name, value[i].issuedOn.$date, value[i].badge_status[0].badgeStatus));\r\n  \r\n          }\r\n  \r\n          setrows(temp_rows);\r\n        }\r\n      });\r\n  }\r\n  else{\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getViewAssertionsResponse());\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setresponse(value.length);\r\n        const temp_rows = []\r\n        for (var i = 0; i < value.length; i++) {\r\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].user_email_address[0].email, value[i].badge_name[0].name, value[i].issuedOn.$date, value[i].badge_status[0].badgeStatus));\r\n\r\n        }\r\n\r\n        setrows(temp_rows);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewAssertions()\r\n  }, []);\r\n\r\n  if (assertionDetailClick == 'true') { return (<div><AssertionDetailsForm assertionId={clickedAssertion} email ={email} userType={userType} userID={userID} /></div>); }\r\n  else {\r\n// if(userType=='5fc5567fcd831cc0c83774b8')//reviewer\r\n// {\r\n//   return (\r\n//     <div>\r\n//       <input data-testid='viewAssertions_RowCount' hidden value={response} />\r\n\r\n//       <React.Fragment>\r\n//         {/* <Title>Recent Orders</Title> */}\r\n//         <Table size=\"small\">\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell></TableCell>\r\n//               <TableCell data-testid='viewAssertions_badgeName'>User</TableCell>\r\n//               <TableCell>Badge</TableCell>\r\n//               <TableCell>Issued On</TableCell>\r\n//               <TableCell>Status</TableCell>\r\n//               <TableCell align=\"right\">Options</TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             {rows.map((row) => (\r\n//               <TableRow data-testid={'viewAssertions_RowID' + row.id} key={row.id} >\r\n\r\n//                 <TableCell></TableCell>\r\n\r\n//                 {/* <TableCell display=\"none\" >{row.mongoId}</TableCell> */}\r\n\r\n//                 <TableCell>{row.user}</TableCell>\r\n//                 <TableCell >{row.badgeName}</TableCell>\r\n\r\n//                 <TableCell>{formatDate(row.issuedOn)}</TableCell>\r\n//                 <TableCell>{row.status}</TableCell>\r\n//                 {/* <TableCell align=\"right\"><EditSharpIcon id=\"viewAssertions_MongoID\" value={row.mongoId} /></TableCell> */}\r\n//                 <TableCell align=\"right\">\r\n//                   <IconButton data-testid={'viewAssertions_editAssertionButton' + row.id} value={row.mongoId} onClick={handleAssertionDetails}>\r\n//                     <EditSharpIcon />\r\n//                   </IconButton>\r\n//                 </TableCell>\r\n//               </TableRow>\r\n//             ))}\r\n//           </TableBody>\r\n//         </Table>\r\n//       </React.Fragment>\r\n//     </div >\r\n\r\n//   );\r\n// }\r\n// else{\r\n    return (\r\n      <div>\r\n        <input data-testid='viewAssertions_RowCount' hidden value={response} />\r\n\r\n        <React.Fragment>\r\n          {/* <Title>Recent Orders</Title> */}\r\n          <Table size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell data-testid='viewAssertions_badgeName'>User</TableCell>\r\n                <TableCell>Badge</TableCell>\r\n                <TableCell>Issued On</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell align=\"right\">Options</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow data-testid={'viewAssertions_RowID' + row.id} key={row.id} >\r\n\r\n                  <TableCell></TableCell>\r\n\r\n                  {/* <TableCell display=\"none\" >{row.mongoId}</TableCell> */}\r\n\r\n                  <TableCell>{row.user}</TableCell>\r\n                  <TableCell >{row.badgeName}</TableCell>\r\n\r\n                  <TableCell>{formatDate(row.issuedOn)}</TableCell>\r\n                  <TableCell>{row.status}</TableCell>\r\n                  {/* <TableCell align=\"right\"><EditSharpIcon id=\"viewAssertions_MongoID\" value={row.mongoId} /></TableCell> */}\r\n                  <TableCell align=\"right\">\r\n                    <IconButton data-testid={'viewAssertions_editAssertionButton' + row.id} value={row.mongoId} onClick={handleAssertionDetails}>\r\n                      <EditSharpIcon />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </React.Fragment>\r\n      </div >\r\n\r\n    );\r\n  }\r\n};\r\n// }\r\n\r\nexport default ViewAssertionsForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\ViewBadgeForm.js",["492","493","494","495","496","497","498","499","500","501","502","503"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getViewBadgeResponse from '../API/ViewBadgeAPI';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport PageviewIcon from '@material-ui/icons/Pageview';\r\nimport BadgeDetailsForm from './BadgeDetailsForm';\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\n\r\n\r\nconst ViewBadgeForm = (props) => {\r\n\r\n\r\n  const [response, setresponse] = useState('0');\r\n  const [userType, setUserType] = useState(props.userType);\r\n  const [userID, setUserID ]= useState(props.userID);\r\n  const [badgeDetailsClick, setBadgeDetailsClick] = useState('false');\r\n  const [clickedBadge, setClickedBadge]=useState('');\r\n  const [clickType, setClickType] = useState('');\r\n\r\n  function createData(id, mongoID, name, description, count, lastIssued, icon ) {\r\n    return { id, mongoID, name, description, count, lastIssued, icon};\r\n  }\r\n\r\n  const [rows, setrows] = useState([]);\r\n  const [passwordClick,setPasswordClick] = useState('False');\r\n\r\n\r\n  const handleUserViewBadgeDetails=event=>{\r\n    setBadgeDetailsClick('true');\r\n    setClickType('UserView');\r\n    setClickedBadge(event.currentTarget.value);\r\n  }\r\n\r\n  const handleAdminEditBadgeDetails=event=>{\r\n    setBadgeDetailsClick('true');\r\n    setClickType('AdminEdit');\r\n    setClickedBadge(event.currentTarget.value);\r\n  }\r\n\r\n  const handleAdminViewBadgeDetails=event=>{\r\n    setBadgeDetailsClick('true');\r\n    setClickType('AdminView');\r\n    setClickedBadge(event.currentTarget.value);\r\n  }\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  const handleviewBadge = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getViewBadgeResponse());\r\n    }).then(value => {\r\n      if (value != undefined)\r\n      {\r\n        setresponse(value.length);\r\n        // console.log(response);\r\n         \r\n          const temp_rows = []\r\n          for (var i = 0; i < value.length; i++) {\r\n            temp_rows.push(createData(i,value[i]._id.$oid,value[i].name,value[i].description,value[i].lastIssued,value[i].count, value[i].icon));              \r\n          }\r\n          setrows (temp_rows);\r\n      }\r\n\r\n    \r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewBadge()\r\n  }, []);\r\n\r\nif(badgeDetailsClick=='true'){ return (<div><BadgeDetailsForm userType={userType} clickType={clickType} badgeName={clickedBadge} userID={userID}/></div>);}\r\nelse\r\n{\r\n  \r\n  return (\r\n    \r\n    <div>\r\n      <input data-testid='viewBadge_RowCount' hidden value={response} readOnly />\r\n\r\n      <React.Fragment>\r\n        {/* <Title>Recent Orders</Title> */}\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell data-testid='viewBadge_badgeName'>Badge Name</TableCell>\r\n              <TableCell>Description</TableCell>\r\n              <TableCell>Last Issued</TableCell>\r\n              <TableCell>Count</TableCell>\r\n              <TableCell align=\"right\">Options</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow data-testid={'viewBadge_BadgeID'+row.id} key={row.id} >\r\n                {/* <TableCell >{row.mongoID}</TableCell> */}\r\n                <TableCell><img src={row.icon} width=\"100\"/></TableCell>\r\n                <TableCell>{row.name}</TableCell>\r\n                <TableCell >{row.description}</TableCell>\r\n                <TableCell>{row.lastIssued}</TableCell>\r\n                <TableCell >{row.count}</TableCell>\r\n                {userType=='5f760d4325c1036d4d466560'?\r\n                <TableCell align=\"right\">\r\n                <IconButton data-testId={'viewBadge_viewBadgeButton'+row.id} value={row.name} onClick={handleAdminViewBadgeDetails}>\r\n                <PageviewIcon/>\r\n                </IconButton>\r\n\r\n                <IconButton data-testId={'viewBadge_editBadgeButton'+row.id} value={row.name} onClick={handleAdminEditBadgeDetails}>\r\n                <EditSharpIcon/>\r\n                </IconButton>\r\n                </TableCell>\r\n                :\r\n                <TableCell align=\"right\">\r\n                <IconButton data-testId={'viewBadge_viewBadgeButton'+row.id} value={row.name} onClick={handleUserViewBadgeDetails}>\r\n                <PageviewIcon/>\r\n                </IconButton>\r\n                </TableCell>}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/* <div className={classes.seeMore}>\r\n          <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n            See more orders\r\n        </Link>\r\n        </div> */}\r\n      </React.Fragment>\r\n    </div>\r\n\r\n  );\r\n      }\r\n};\r\n\r\nexport default ViewBadgeForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\MyBackpackAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\MyBackpackDetailsForm.js",["504","505","506","507","508","509","510","511","512"],"import React, {useState, Text, useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI'\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MyBackpackForm from './MyBackpackForm';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport getLinkedInResponse from '../API/AddLinkedInCertificateAPI';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\n\r\nconst MyBackpackDetailsForm = (props) => {\r\n\r\n    const [assertionId, setAssertionId] = useState(props.assertionId);\r\n    const [badgeName, setBadgeName] = useState('');\r\n    const [badgeRecipient, setBadgeRecipient] = useState('');\r\n    const [modifiedDate, setModifiedDate] = useState('');\r\n    const [badgeStatus, setBadgeStatus] = useState('');\r\n    const [evidencelink, setEvidencelink] = useState('');\r\n    const [badgeReviewer, setBadgeReviewer] = useState('');\r\n    const [badgeComments, setBadgeComments] = useState('');\r\n    const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\r\n    const [publicLink, setPublicLink] = useState('');\r\n    const [badgeIcon, setBadgeIcon] = useState('');\r\n    // const [saveFlag, setSaveFlag] = useState('False');\r\n    // const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n    //const [email,setEmail] = useState('');\r\n    const [userID,setuserID] = useState('');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            // margin: theme.spacing(1),\r\n       \r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        \r\n        avatar_additional: {\r\n          \r\n          \r\n            backgroundColor: theme.palette.info.main,\r\n        },\r\n        root: {\r\n            display: 'flex',\r\n            '& > *': {\r\n              margin: theme.spacing(1),\r\n            },\r\n          },\r\n         \r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n        innerText :{\r\n            width :'90%',\r\n        },\r\n        innerLogo :{\r\n            width :'10%',\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n     \r\n    const handleLinkedIn = async () => {\r\n\r\n        var response1 = new Promise((resolve, reject) => {\r\n            const dt=new Date(badgeIssuedOn);\r\n       \r\n            resolve(getLinkedInResponse(badgeName,dt.getMonth()+1,dt.getFullYear(),publicLink));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                \r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleviewAssertionById = async () => {\r\n\r\n        var response1 = new Promise((resolve, reject) => {\r\n            //alert(assertionId);\r\n            resolve(getAssertionDetailByIdResponse(assertionId));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setAssertionId(value[0].assertionID.$oid);\r\n                setBadgeName(value[0].badge_details[0].name);\r\n                setBadgeRecipient(value[0].user_details[0].email);\r\n                setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\r\n                setBadgeComments(value[0].comments);\r\n                setBadgeReviewer(value[0].reviewer_details[0].email);\r\n                setEvidencelink(value[0].workLink);\r\n                setBadgeStatus(value[0].badge_status[0].badgeStatus);\r\n                setBadgeIcon(value[0].badge_details[0].icon);\r\n                setModifiedDate(formatDate(value[0].modified.$date));\r\n                setPublicLink(value[0].publicLink);\r\n                setuserID(value[0].user_details[0]._id.$oid);\r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    \r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewAssertionById();\r\n    }, []);\r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <MyBackpackForm userID={userID} />\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper} data-testid=\"backpackDetails_ID\">\r\n\r\n            <div className={classes.root}>\r\n      \r\n  \r\n                <Typography >\r\n                <img src={badgeIcon} width=\"150\"/>\r\n                </Typography>\r\n                \r\n                {/* <Avatar className={classes.avatar_additional} data-testid=\"backpackDetails_linkedIn\"  onClick={handleLinkedIn}>\r\n                    <LinkedInIcon/>\r\n                    </Avatar> */}\r\n                    </div>\r\n                \r\n                <Typography component=\"h1\" variant=\"h5\" >\r\n                    Assertion Details\r\n                    <Avatar className={classes.avatar_additional} data-testid=\"backpackDetails_linkedIn\"  onClick={handleLinkedIn}>\r\n                    <LinkedInIcon/>\r\n                    </Avatar>\r\n                </Typography>\r\n               \r\n                <br></br>\r\n\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            name=\"badgeName\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n\r\n                            id=\"backpackDetails_badgeName\"\r\n                            label=\"Badge Name\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeName\",\r\n                            }}\r\n                            value={badgeName}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            id=\"backpackDetails_badgeRecipient\"\r\n                            label=\"Badge Recipient\"\r\n                            name=\"badgeRecipient\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeRecipient\",\r\n                            }}\r\n                            value={badgeRecipient}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"backpackDetails_modifiedDate\"\r\n                            label=\"Last Modified\"\r\n                            name=\"modifiedDate\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_modifiedDate\",\r\n                            }}\r\n                            value={modifiedDate}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"backpackDetails_badgeStatus\"\r\n                            label=\"Badge status\"\r\n                            name=\"badge status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            \r\n                        /> \r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"backpackDetails_badgeIssuedOn\"\r\n                            label=\"Issued On\"\r\n                            name=\"issuedOn\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeIssuedOn\",\r\n                            }}\r\n                            value={badgeIssuedOn}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"evidencelink\"\r\n                            label=\"Evidence Link\"\r\n                            id=\"backpackDetails_evidencelink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_evidencelink\",\r\n                            }}\r\n                            value={evidencelink}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"badgeComments\"\r\n                            label=\"Badge Comments\"\r\n                            id=\"backpackDetails_badgeComments\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeComments\",\r\n                            }}\r\n                            value={badgeComments}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"badgeReviewer\"\r\n                            label=\"Badge Reviewer\"\r\n                            id=\"backpackDetails_badgeReviewer\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeReviewer\",\r\n                            }}\r\n                            value={badgeReviewer}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                    <Grid container item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            name=\"publicLink\"\r\n                            className={classes.innerText}\r\n                            label=\"Public Link\"\r\n                            id=\"backpackDetails_publiclink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_publiclink\",\r\n                            }}\r\n                            value={publicLink}\r\n                        />\r\n                           <LaunchIcon className={classes.innerLogo} onClick={() => window.open(publicLink, \"_blank\")}/>\r\n                   \r\n                      \r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    {/* <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"assertionDetails_saveButton\"\r\n                            onClick={handleSaveAssertion}>\r\n                            Save\r\n                        </Button>\r\n                    </Grid> */}\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"backpackDetails_backButton\" \r\n                            onClick={handleBackButtonClick}>\r\n\r\n                            Back\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n};\r\n\r\nexport default MyBackpackDetailsForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ModifyUsersAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewUsersAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\AssertionDetailsForm.js",["513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541"],"import React, {useState, Text, useEffect} from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI'\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport updateAssertionResponse from '../API/UpdateAssertionAPI';\r\n\r\nimport { InputLabel } from '@material-ui/core';\r\nimport ViewAssertionsForm from './ViewAssertionsForm';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport updateUserBadgeStatusResponse from '../API/UpdateUserBadgeStatusAPI';\r\n\r\nconst AssertionDetailsForm = (props) => {\r\n\r\n    const [assertionId, setAssertionId] = useState(props.assertionId);\r\n    const [badgeName, setBadgeName] = useState('');\r\n    const [badgeRecipient, setBadgeRecipient] = useState('');\r\n    const [modifiedDate, setModifiedDate] = useState('');\r\n    const [badgeStatus, setBadgeStatus] = useState('');\r\n    const [evidencelink, setEvidencelink] = useState('');\r\n    const [badgeReviewer, setBadgeReviewer] = useState('');\r\n    const [badgeComments, setBadgeComments] = useState('');\r\n    const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\r\n    const [icon, setIcon] = useState('');\r\n    const [publicLink, setPublicLink] = useState('');\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n    const [email,setEmail] = useState(props.email);\r\n    const [userID,setuserID] = useState(props.userID);\r\n    const [userType,setUserType]=useState(props.userType);\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleviewAssertionById = async () => {\r\n\r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(getAssertionDetailByIdResponse(assertionId));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setAssertionId(value[0].assertionID.$oid);\r\n                setBadgeName(value[0].badge_details[0].name);\r\n                setBadgeRecipient(value[0].user_details[0].email);\r\n                if(value[0].issuedOn!=null)\r\n                    setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\r\n                setBadgeComments(value[0].comments);\r\n               \r\n                if(value[0].reviewer_details!='')\r\n                    setBadgeReviewer(value[0].reviewer_details[0].email);\r\n                setEvidencelink(value[0].workLink);\r\n                setBadgeStatus(value[0].badge_status[0]._id.$oid);\r\n                setModifiedDate(formatDate(value[0].modified.$date));\r\n                setPublicLink(value[0].publicLink);\r\n                setIcon(value[0].badge_details[0].icon);\r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleSaveAssertion = () => {\r\n\r\n     if(userType=='5f760d4325c1036d4d466560'){\r\n        var response2 = new Promise((resolve, reject) => {\r\n            // alert(userID);\r\n            resolve(updateAssertionResponse(assertionId, badgeStatus, evidencelink, badgeComments, publicLink, userID));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n                \r\n            }           \r\n\r\n        });\r\n     }\r\n     else{\r\n        var response2 = new Promise((resolve, reject) => {\r\n            // alert(userID);\r\n            resolve(updateUserBadgeStatusResponse(assertionId, userID, badgeStatus,badgeComments));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n                \r\n            }           \r\n\r\n        });\r\n    }\r\n        \r\n    }\r\n\r\n    const handleviewUserByEmail = async () => {\r\n        \r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(UserDetailByEmailResponse(email));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setuserID(value[0]._id.$oid);\r\n   \r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewAssertionById();\r\n        // handleviewUserByEmail();\r\n    }, []);\r\n\r\n    \r\n\r\n    const handleBadgeStatusChange = event => {\r\n        setBadgeStatus(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleBadgeWorkLinkChange = event => {\r\n        setEvidencelink(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleBadgeCommentsChange = event => {\r\n        setBadgeComments(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handlePublicLinkChange = event => {\r\n        setPublicLink(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <ViewAssertionsForm  email={email} userType={userType} userID={userID} />\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper} data-testid=\"assertionDetails_ID\">\r\n                {/* <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon/>\r\n                </Avatar>\r\n               */}\r\n                <Typography >                \r\n                <img src={icon} width=\"150\"/>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Edit Assertion\r\n                </Typography>\r\n                <br></br>\r\n\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            name=\"badgeName\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n\r\n                            id=\"badgeName\"\r\n                            label=\"Badge Name\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeName\",\r\n                            }}\r\n                            value={badgeName}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            id=\"assertiondetails_recipient\"\r\n                            label=\"Badge Recipient\"\r\n                            name=\"badgeRecipient\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeRecipient\",\r\n                            }}\r\n                            value={badgeRecipient}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"assertiondetails_modifiedDate\"\r\n                            label=\"Last Modified\"\r\n                            name=\"modifiedDate\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertiondetails_modifiedDate\",\r\n                            }}\r\n                            value={modifiedDate}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"assertionDetails_badgeStatus\">\r\n                        Badge Status\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"assertionDetails_badgeStatus\"\r\n                            id=\"assertionDetails_badgeStatus\"\r\n                            name=\"Badge Status\"\r\n                            fullWidth\r\n                            label=\"Badge Status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            onChange={handleBadgeStatusChange}\r\n                            >\r\n                            <MenuItem value={'5f776f556289f17659874f2e'}>Applied</MenuItem>\r\n                            <MenuItem value={'5f776ee06289f17659874f2a'}>Working</MenuItem>\r\n                            <MenuItem value={'5f776f336289f17659874f2b'}>Rework</MenuItem>\r\n                            <MenuItem value={'5f776f416289f17659874f2c'}>Approved</MenuItem>\r\n                            <MenuItem value={'5f776f4c6289f17659874f2d'}>Rejected</MenuItem>\r\n                        </Select>\r\n\r\n\r\n                        {/* <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"assertionDetails_badgeStatus\"\r\n                            label=\"Badge status\"\r\n                            name=\"badge status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            onChange={handleBadgeStatusChange}\r\n                        /> */}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"assertionDetails_badgeIssuedOn\"\r\n                            label=\"Issued On\"\r\n                            name=\"issuedOn\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertiondetails_badgeIssuedOn\",\r\n                            }}\r\n                            value={badgeIssuedOn}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"evidencelink\"\r\n                            label=\"Evidence Link\"\r\n                            id=\"assertionDetails_evidencelink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_evidencelink\",\r\n                            }}\r\n                            value={evidencelink}\r\n                           \r\n                            onChange={userType=='5fc5567fcd831cc0c83774b8'?'':handleBadgeWorkLinkChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"badgeComments\"\r\n                            label=\"Badge Comments\"\r\n                            id=\"assertionDetails_badgeComments\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeComments\",\r\n                            }}\r\n                            value={badgeComments}\r\n                            onChange={handleBadgeCommentsChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"badgeReviewer\"\r\n                            label=\"Badge Reviewer\"\r\n                            id=\"assertionDetails_badgeReviewer\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeReviewer\",\r\n                            }}\r\n                            value={badgeReviewer}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"publicLink\"\r\n                            label=\"Public Link\"\r\n                            id=\"assertionDetails_publiclink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_publiclink\",\r\n                            }}\r\n                            value={publicLink}\r\n                            onChange={userType=='5fc5567fcd831cc0c83774b8'?'':handlePublicLinkChange}\r\n                           \r\n                        />\r\n                    </Grid>\r\n                    {/*\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"owners\"\r\n                            label=\"Owners of Badge\"\r\n                            id=\"owners\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_owners\",\r\n                            }}\r\n                            value={owners}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"reviewers\"\r\n                            label=\"Reviewers of Badge\"\r\n                            id=\"reviewers\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_reviewers\",\r\n                            }}\r\n                            value={reviewers}\r\n                        />\r\n                    </Grid>\r\n*/}\r\n\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"assertionDetails_saveButton\"\r\n                            onClick={handleSaveAssertion}>\r\n                            Save\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n\r\n                            data-testid=\"assertionDetails_backButton\" \r\n                            onClick={handleBackButtonClick}>\r\n\r\n                            Back\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden data-testid='assertionDetails_Result' value={result} readOnly />\r\n                <input type=\"text\" hidden data-testid='assertionDetails_userID' value={userID} readOnly/>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n    //   }\r\n    // }\r\n};\r\n\r\nexport default AssertionDetailsForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\AddUserForm.js",["542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport ViewUserForm from '../forms/ViewUsersForm';\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport addNewUserResponse from '../API/AddNewUserAPI';\r\nimport { InputLabel } from '@material-ui/core';\r\nimport userEvent from '@testing-library/user-event';\r\n\r\n\r\nconst AddUserForm = (props) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [userType, setUserType] = useState('regular');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [organizationName, setOrganizationName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n    const [firstNameClick,setFirstNameClick] = useState('False');\r\n    const [lastNameClick,setLastNameClick] = useState('False');\r\n    const [emailClick,setEmailClick] = useState('False');\r\n    const [userTypeClick, setUserTypeClick] = useState('False');\r\n    const [organizationNameClick, setOrganizationNameClick] = useState('False');\r\n    const [middleNameClick, setMiddleNameClick] = useState('False');\r\n    const [passClick,setPassClick] = useState('False');\r\n    const [confPassClick,setConfPassClick] = useState('False');\r\n\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAddUserButton = () => {\r\n        setFirstNameClick('True');\r\n        setMiddleNameClick('True');\r\n        setLastNameClick('True');\r\n        setOrganizationNameClick('True');\r\n        setEmailClick('True');\r\n        setPassClick('True');\r\n        setConfPassClick('True');\r\n        \r\n\r\n        if (password != confirmPassword) {\r\n            setResult('Password Mismatch');\r\n            setPassword('');\r\n            setConfirmPassword('');\r\n          }\r\n          else{\r\n        var response2 = new Promise((resolve, reject) => {\r\n            resolve(addNewUserResponse(email, password, userType, firstName, lastName, middleName, organizationName));\r\n        }).then(value => {\r\n            if (value=='registered'){\r\n                setResult(\"Created User Successfully\");\r\n                setSaveFlag('False');\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n\r\n    const handleUserTypeChange = event => {\r\n        setUserType(event.target.value);\r\n        setUserTypeClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleFirstNameChange = event => {\r\n        setFirstName(event.target.value);\r\n        setFirstNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleMiddleNameChange = event => {\r\n        setMiddleName(event.target.value);\r\n        setMiddleNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleLastNameChange = event => {\r\n        setLastName(event.target.value);\r\n        setLastNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleOrganizationNameChange = event => {\r\n        setOrganizationName(event.target.value);\r\n        setOrganizationNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleEmailChange = event => {\r\n        setEmail(event.target.value);\r\n        setEmailClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handlePasswordChange = event => {\r\n        setPassword(event.target.value);\r\n        setPassClick('True');\r\n        setSaveFlag('True');\r\n        setResult('');\r\n    }\r\n\r\n    const handleConfirmPasswordChange = event => {\r\n        setConfirmPassword(event.target.value);\r\n        setConfPassClick('True');\r\n        setSaveFlag('True');\r\n        setResult('');\r\n    }\r\n  \r\n\r\n    if (backButtonClicked=='True'){\r\n    return(\r\n    <div>\r\n        <ViewUserForm />\r\n    </div>\r\n    );\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper} data-testid=\"addUser_ID\">\r\n                <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Add User\r\n      </Typography>\r\n                <br></br>\r\n         \r\n                <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"firstName\"\r\n                            label=\"First Name\"\r\n                            id=\"addUser_firstName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_firstName\",\r\n                            }}\r\n                            className={((firstName.length=='')&& (firstNameClick=='True')) ? 'emptyfield' : ''}\r\n                            value={firstName}\r\n                            onChange={handleFirstNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"middlename\"\r\n                            label=\"Middle Name\"\r\n                            id=\"addUser_middleName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_middleName\",\r\n                            }}\r\n                            value={middleName}\r\n                            className={((middleName.length=='')&& (middleNameClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleMiddleNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            id=\"addUser_lastName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_lastName\",\r\n                            }}\r\n                            value={lastName}\r\n                            className={((lastName.length=='')&& (lastNameClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleLastNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            name=\"email\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            id=\"addUser_email\"\r\n                            label=\"Email\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_email\",\r\n                            }}\r\n                            value={email}\r\n                            className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleEmailChange}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"addUser_userType\">\r\n                        User Type\r\n                    </InputLabel>\r\n                        <Select\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            id=\"addUser_userType\"\r\n                            label=\"User Type\"\r\n                            name=\"userType\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_userType\",\r\n                            }}\r\n                            value={userType}\r\n                            onChange={handleUserTypeChange}\r\n                            className={((userType.length=='')&& (userTypeClick=='True')) ? 'emptyfield' : ''}\r\n                            >\r\n                            <MenuItem value={'regular'}>Regular</MenuItem>\r\n                            <MenuItem value={'admin'}>Admin</MenuItem>\r\n                            <MenuItem value={'reviewer'}>Reviewer</MenuItem>\r\n                            \r\n                        </Select> \r\n\r\n                    </Grid> \r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            type='password'\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            id=\"addUser_password\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_password\",\r\n                            }}\r\n                            value={password}\r\n                            className={((password.length=='')&& (passClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handlePasswordChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            type='password'\r\n                            name=\"confirmpassword\"\r\n                            label=\"Confirm Password\"\r\n                            id=\"addUser_confirmPassword\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_confirmPassword\",\r\n                            }}\r\n                            value={confirmPassword}\r\n                            className={((confirmPassword.length=='')&& (confPassClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleConfirmPasswordChange}\r\n                        />\r\n                    </Grid>\r\n                   \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"organizationName\"\r\n                            label=\"Organization Name\"\r\n                            id=\"addUser_organizationName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_organizationName\",\r\n                            }}\r\n                            value={organizationName}\r\n                            className={((organizationName.length=='')&& (organizationNameClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleOrganizationNameChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"addUser_submitButton\"\r\n                            onClick={handleAddUserButton}\r\n                            >\r\n                            Save\r\n                 </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"addUser_backButton\" \r\n                            onClick={handleBackButtonClick}\r\n                            >\r\n                            Back\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden data-testid='addUser_Result' value={result} />\r\n            </div>\r\n        </Container>\r\n    );\r\n                        }\r\n};\r\n\r\nexport default AddUserForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\UserDetailsForm.js",["575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport ViewUserForm from '../forms/ViewUsersForm';\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { InputLabel } from '@material-ui/core';\r\nimport UpdateUserDetailsResponse from '../API/UpdateUserDetailsAPI';\r\n\r\n\r\nconst UserDetailsForm = (props) => {\r\n\r\n    const [email, setEmail] = useState(props.email);\r\n    const [userType, setUserType] = useState('');\r\n    const [userStatus, setUserStatus] = useState('');\r\n    const [created, setCreated] = useState('');\r\n    const [lastmodified, setLastModified] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [organizationName, setOrganizationName] = useState('');\r\n    const [adminId, setAdminId] = useState(props.userID);\r\n\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleviewUserByEmail = async () => {\r\n        \r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(UserDetailByEmailResponse(email));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setUserType(value[0].user_type_details[0].type);\r\n                setUserStatus(value[0].user_status_details[0].userStatus);\r\n                // _id.$oid\r\n                setCreated(formatDate(value[0].created.$date));\r\n                setLastModified(formatDate(value[0].modified.$date));\r\n                setFirstName(value[0].firstName);\r\n                setLastName(value[0].secondName);\r\n                setMiddleName(value[0].middleName);\r\n                setOrganizationName(value[0].organizationName);\r\n          \r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleSaveAssertion = () => {\r\n        var response2 = new Promise((resolve, reject) => {\r\n            resolve(UpdateUserDetailsResponse(email, userType, firstName, lastName, middleName, organizationName,adminId,userStatus));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewUserByEmail()\r\n    }, []);\r\n\r\n    const handleUserTypeChange = event => {\r\n        setUserType(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleUserStatusChange = event => {\r\n        setUserStatus(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleFirstNameChange = event => {\r\n        setFirstName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleMiddleNameChange = event => {\r\n        setMiddleName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleLastNameChange = event => {\r\n        setLastName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleOrganizationNameChange = event => {\r\n        setOrganizationName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n  \r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <ViewUserForm userID={adminId}/>\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper} data-testid=\"userDetails_ID\">\r\n                <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Edit User Details\r\n      </Typography>\r\n                <br></br>\r\n         \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            name=\"email\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"userDetails_email\"\r\n                            label=\"Email\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_email\",\r\n                            }}\r\n                            value={email}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"userDetails_userType\">\r\n                        User Type\r\n                    </InputLabel>\r\n                        <Select\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            id=\"userDetails_userType\"\r\n                            label=\"User Type\"\r\n                            name=\"userType\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_userType\",\r\n                            }}\r\n                            value={userType}\r\n                            onChange={handleUserTypeChange}\r\n                            >\r\n                            <MenuItem value={'regular'}>Regular</MenuItem>\r\n                            <MenuItem value={'admin'}>Admin</MenuItem>\r\n                            <MenuItem value={'reviewer'}>Reviewer</MenuItem>\r\n                            \r\n                        </Select> \r\n\r\n                    </Grid> \r\n\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"userDetails_userStatus\">\r\n                        User Status\r\n                    </InputLabel>\r\n                        <Select\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              id=\"userDetails_userStatus\"\r\n                              label=\"User Status\"\r\n                              name=\"userStatus\"\r\n                              inputProps={{\r\n                                  \"data-testid\": \"userDetails_userStatus\",\r\n                                  \r\n                              }}\r\n                              value={userStatus}\r\n                              onChange={handleUserStatusChange}\r\n                            >\r\n                            <MenuItem value={'active'}>Active</MenuItem>\r\n                            <MenuItem value={'inactive'}>Inactive</MenuItem>\r\n                            <MenuItem value={'blocked'}>Blocked</MenuItem>                            \r\n                        </Select> \r\n                    </Grid>                     \r\n           \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"userDetails_created\"\r\n                            label=\"Created Date\"\r\n                            name=\"created\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_created\",\r\n                            }}\r\n                            value={created}\r\n                        />\r\n                    </Grid>\r\n                    {/* <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"assertionDetails_badgeStatus\">\r\n                        Badge Status\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"assertionDetails_badgeStatus\"\r\n                            id=\"assertionDetails_badgeStatus\"\r\n                            name=\"Badge Status\"\r\n                            fullWidth\r\n                            label=\"Badge Status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            onChange={handleBadgeStatusChange}\r\n                            >\r\n                            <MenuItem value={'5f776f556289f17659874f2e'}>Applied</MenuItem>\r\n                            <MenuItem value={'5f776ee06289f17659874f2a'}>Working</MenuItem>\r\n                            <MenuItem value={'5f776f336289f17659874f2b'}>Rework</MenuItem>\r\n                            <MenuItem value={'5f776f416289f17659874f2c'}>Approved</MenuItem>\r\n                            <MenuItem value={'5f776f4c6289f17659874f2d'}>Rejected</MenuItem>\r\n                        </Select> \r\n\r\n                    </Grid> */}\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"userDetails_lastModified\"\r\n                            label=\"Last Modified\"\r\n                            name=\"lastModified\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_lastModified\",\r\n                            }}\r\n                            value={lastmodified}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"firstName\"\r\n                            label=\"First Name\"\r\n                            id=\"userDetails_firstName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_firstName\",\r\n                            }}\r\n                            value={firstName}\r\n                            onChange={handleFirstNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"middlename\"\r\n                            label=\"Middle Name\"\r\n                            id=\"userDetails_middleName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_middleName\",\r\n                            }}\r\n                            value={middleName}\r\n                            onChange={handleMiddleNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            id=\"userDetails_lastName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_lastName\",\r\n                            }}\r\n                            value={lastName}\r\n                            onChange={handleLastNameChange}\r\n                        />\r\n                    </Grid>\r\n                   \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"organizationName\"\r\n                            label=\"Organization Name\"\r\n                            id=\"userDetails_organizationName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_organizationName\",\r\n                            }}\r\n                            value={organizationName}\r\n                            onChange={handleOrganizationNameChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"userDetails_saveButton\"\r\n                            onClick={handleSaveAssertion}\r\n                            >\r\n                            Save\r\n                 </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"userDetails_backButton\" \r\n                            onClick={handleBackButtonClick}\r\n                            >\r\n                            Back\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden readOnly data-testid='userDetails_Result' value={result} />\r\n            </div>\r\n        </Container>\r\n    );\r\n                        }\r\n};\r\n\r\nexport default UserDetailsForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewAssertionsAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewAssertionForReviewersAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\forms\\BadgeDetailsForm.js",["592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport getViewBadgeByNameResponse from '../API/BadgeDetailsByNameAPI'\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport ViewBadgeForm from '../forms/ViewBadgeForm';\r\nimport updateBadgeResponseAPI from '../API/UpdateBadgeAPI'\r\nimport { InputLabel, StepIcon } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport addNewAssertionResponse from '../API/AddNewAssertionAPI';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\n\r\n\r\n\r\nconst BadgeDetailsForm = (props) => {\r\n\r\n  const [badgeId,setbadgeID]=useState('');\r\n  const [badgeName, setbadgeName] = useState(props.badgeName);\r\n  const [userType, setUserType]=useState(props.userType);\r\n  const [userID, setUserID]=useState(props.userID);\r\n  const [clickType, setClickType] = useState(props.clickType);\r\n  const [badgeDescriptoion, setBadgeDescription] = useState('');\r\n  const [createdDate, setCreatedDate] = useState('');\r\n  const [modifiedDate, setModifiedDate] = useState('');\r\n  const [link, setLink] = useState('');\r\n  const [badgeType, setBadgeType] = useState('');\r\n  const [evidenceRequired, setEvidenceRequired] = useState('');\r\n  const [userRequestable, setUserRequestable] = useState('');\r\n  const [owners, setOwners] = useState('');\r\n  const [reviewers, setReviewers] = useState('');\r\n  const [icon, setIcon] = useState('');\r\n  const [saveFlag, setSaveFlag]=useState('False');\r\n  const [result, setResult]=useState('');\r\n  const [requestBadgeResult,setrequestBadgeResult]=useState('');\r\n  const [assignBadgeResult, setAssignBadgeResult]=useState('');\r\n  const [backbuttonClicked, setBackButtonClicked]=useState('False');\r\n  const [requestBadgeButtonClicked, setRequestBadgeButtonClicked]=useState(false);\r\n  const [assignBadgeButtonClicked, setAssignBadgeButtonClicked]=useState(false);\r\n  const [workLink, setWorkLink]=useState('');\r\n  const [assigneeEmail, setAssigneeEmail] = useState('');\r\n  const [assigneeID, setAssigneeID] = useState('');\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleBadgeNameChange =event =>{\r\n    setbadgeName(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n\r\n  const handleBadgeDescriptionChange =event =>{\r\n    setBadgeDescription(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleBadgeLinkChange =event =>{\r\n    setLink(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleBadgeTypeChange =event =>{\r\n    setBadgeType(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleEvidenceRequiredChange =event =>{\r\n    setEvidenceRequired(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleUserRequestableChange =event =>{\r\n    setUserRequestable(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleOwnerChange =event =>{\r\n    setOwners(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleReviewerChange =event =>{\r\n    setReviewers(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n\r\n  const handleWorkLinkChange =event =>{\r\n    setWorkLink(event.target.value);\r\n\r\n  }\r\n\r\n  const handleAssigneeEmailChange =event =>{\r\n    setAssigneeEmail(event.target.value);\r\n  }\r\n\r\n  const handleSaveButtonClick = () =>{\r\n    var response2 = new Promise((resolve, reject) => {\r\n      resolve(updateBadgeResponseAPI(badgeName, badgeDescriptoion, link, userRequestable, badgeType, owners, reviewers, 'icon link',evidenceRequired));\r\n    }).then(value=>{\r\n      if (value==200){\r\n        setResult('Saved Successfully');\r\n        setSaveFlag('False');\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleBackButtonClick = () =>{\r\n    setBackButtonClicked('True');\r\n  }\r\n\r\n  const handleRequestBadgeButtonClick =() =>{\r\n    setRequestBadgeButtonClicked(true);\r\n  }\r\n\r\n  const handleAssignBadgeButtonClick =() =>{\r\n    setAssignBadgeButtonClicked(true);\r\n  }\r\n\r\n  const handleRequestBadgeButtonClose = () => {\r\n    setRequestBadgeButtonClicked(false);\r\n  };\r\n\r\n  const handleAssignBadgeButtonClose = () => {\r\n    setAssignBadgeButtonClicked(false);\r\n  };\r\n\r\n  const handlerequestBadge = async() => {\r\n    var response3 = new Promise((resolve, reject) => {\r\n      resolve(addNewAssertionResponse(userID,badgeId,'',workLink,'',''));\r\n    }).then(value => {   \r\n      if (value == 200) {\r\n        setrequestBadgeResult('Request for Badge is successfully submitted');\r\n      }\r\n\r\n\r\n    });\r\n    setRequestBadgeButtonClicked(false);\r\n  };\r\n\r\n  const handleAssignBadge =async() => {\r\n    var response4 = new Promise((resolve, reject) => {\r\n      resolve(UserDetailByEmailResponse(assigneeEmail));\r\n      }).then(value => {\r\n      if (value != undefined) {\r\n          setAssigneeID(value[0]._id.$oid);\r\n      }\r\n    });\r\n    var response5 = new Promise((resolve, reject) => {\r\n      resolve(addNewAssertionResponse(assigneeID,badgeId,'','','',''));\r\n    }).then(value => {   \r\n      if (value == 200) {\r\n        setAssignBadgeResult('Badge Assigned successfully');\r\n      }\r\n\r\n\r\n    });\r\n    setAssignBadgeButtonClicked(false);\r\n  }\r\n  const handleviewBadgeByName = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getViewBadgeByNameResponse(badgeName));\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setbadgeID(value[0]._id.$oid);\r\n        setBadgeDescription(value[0].description);\r\n        setLink(value[0].link);\r\n        setUserRequestable(value[0].userRequestable);\r\n        setEvidenceRequired(value[0].evidence);\r\n        setOwners(value[0].owner_details[0].email);\r\n        setReviewers(value[0].reviewer_details[0].email);\r\n        setBadgeType(value[0].badge_type_details[0].badgeType);\r\n        setCreatedDate(formatDate(value[0].created.$date));\r\n        setModifiedDate(formatDate(value[0].modified.$date));\r\n        setIcon(value[0].icon);\r\n      }\r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleviewBadgeByName()\r\n  }, []);\r\n\r\n  \r\nif (backbuttonClicked=='True'){\r\nreturn (\r\n  <div><ViewBadgeForm userType={userType} /> </div>\r\n);\r\n}\r\nelse{\r\nif(clickType=='AdminEdit'){\r\nreturn (\r\n<Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography >\r\n          {/* <CardMembershipOutlinedIcon /> */}\r\n          <img src={icon} width=\"150\"/>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Badge Details\r\n      </Typography>\r\n        <br></br>\r\n        {/* <form className={classes.form} noValidate> */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              name=\"badgeName\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"badgeName\"\r\n              label=\"Badge Name\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeName\",\r\n              }}\r\n              value={badgeName}\r\n              onChange={handleBadgeNameChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              id=\"badgeDescriptoion\"\r\n              label=\"Badge Description\"\r\n              name=\"badgeDescriptoion\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeDescription\",\r\n              }}\r\n              value={badgeDescriptoion}\r\n              onChange={handleBadgeDescriptionChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"createdDate\"\r\n              label=\"Created Date\"\r\n              name=\"createdDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgedetails_createdDate\",\r\n              }}\r\n              value={createdDate}\r\n\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"modifiedDate\"\r\n              label=\"modified Date\"\r\n              name=\"modifiedDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_modifiedDate\",\r\n              }}\r\n              value={modifiedDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"link\"\r\n              label=\"Link\"\r\n              id=\"link\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_link\",\r\n              }}\r\n              value={link}\r\n              onChange={handleBadgeLinkChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n          <InputLabel shrink id=\"badgeDetails_badgeType\">\r\n                        Badge Type\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"badgeDetails_badgeType\"\r\n                            id=\"badgeDetails_badgeType\"\r\n                            name=\"Badge Status\"\r\n                            fullWidth\r\n                            label=\"Badge Type\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_badgeType\",\r\n                            }}\r\n                            value={badgeType}\r\n                            onChange={handleBadgeTypeChange}\r\n                            >\r\n                            <MenuItem value={'Open Badge'}>Open Badge</MenuItem>\r\n                            <MenuItem value={'Community Badge'}>Community Badge</MenuItem>\r\n                        </Select>\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"badgeType\"\r\n              label=\"Badge Type\"\r\n              id=\"badgeType\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeType\",\r\n              }}\r\n              value={badgeType}\r\n              onChange={handleBadgeTypeChange}\r\n            /> */}\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n          <InputLabel shrink id=\"badgeDetails_evidenceRequired\">\r\n                        Evidence Required\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"badgeDetails_evidenceRequired\"\r\n                            id=\"badgeDetails_evidenceRequired\"\r\n                            name=\"badgeDetails_evidenceRequired\"\r\n                            fullWidth\r\n                            label=\"Evidence Required\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n                            }}\r\n                            value={evidenceRequired}\r\n                            onChange={handleEvidenceRequiredChange}\r\n                            >\r\n                            <MenuItem value={'True'}>True</MenuItem>\r\n                            <MenuItem value={'False'}>False</MenuItem>\r\n                        </Select>\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"evidenceRequired\"\r\n              label=\"Evidence Required\"\r\n              id=\"evidenceRequired\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n              }}\r\n              value={evidenceRequired}\r\n              onChange={handleEvidenceRequiredChange}\r\n            /> */}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n          <InputLabel shrink id=\"badgeDetails_userRequestable\">\r\n                        User Requestable\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"badgeDetails_userRequestable\"\r\n                            id=\"badgeDetails_userRequestable\"\r\n                            name=\"badgeDetails_userRequestable\"\r\n                            fullWidth\r\n                            label=\"User Requestable\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_userRequestable\",\r\n                            }}\r\n                            value={userRequestable}\r\n                            onChange={handleUserRequestableChange}\r\n                            >\r\n                            <MenuItem value={'True'}>True</MenuItem>\r\n                            <MenuItem value={'False'}>False</MenuItem>\r\n                        </Select>\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"userRequestable\"\r\n              label=\"User Requestable\"\r\n              id=\"userRequestable\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_userRequestable\",\r\n              }}\r\n              value={userRequestable}\r\n              onChange={handleUserRequestableChange}\r\n            /> */}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"owners\"\r\n              label=\"Owners of Badge\"\r\n              id=\"owners\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_owners\",\r\n              }}\r\n              value={owners}\r\n              onChange={handleOwnerChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              \r\n              name=\"reviewers\"\r\n              label=\"Reviewers of Badge\"\r\n              id=\"reviewers\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_reviewers\",\r\n              }}\r\n              value={reviewers}\r\n              onChange={handleReviewerChange}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              disabled={saveFlag=='True'?false:true}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"badgeDetails_UpdateButton\"\r\n              onClick={handleSaveButtonClick} >\r\n              \r\n              Save\r\n        </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            data-testid=\"badgeDetails_backButton\" \r\n            onClick={handleBackButtonClick}>\r\n            Back to Badges\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <label>{result}</label>\r\n        <input type=\"text\" hidden data-testid='badgeDetails_Result' value={result} />\r\n      </div>\r\n    </Container>\r\n);\r\n}\r\nelse if(clickType=='AdminView'){\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography >\r\n          <img src={icon} width=\"150\"/>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Badge Details\r\n      </Typography>\r\n        <br></br>\r\n        {/* <form className={classes.form} noValidate> */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              name=\"badgeName\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n\r\n              id=\"badgeName\"\r\n              label=\"Badge Name\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeName\",\r\n              }}\r\n              value={badgeName}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              id=\"badgeDescription\"\r\n              label=\"Badge Description\"\r\n              name=\"badgeDescription\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeDescription\",\r\n              }}\r\n              value={badgeDescriptoion}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"createdDate\"\r\n              label=\"Created Date\"\r\n              name=\"createdDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgedetails_createdDate\",\r\n              }}\r\n              value={createdDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"modifiedDate\"\r\n              label=\"modified Date\"\r\n              name=\"modifiedDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_modifiedDate\",\r\n              }}\r\n              value={modifiedDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"link\"\r\n              label=\"Link\"\r\n              id=\"link\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_link\",\r\n              }}\r\n              value={link}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"badgeType\"\r\n              label=\"Badge Type\"\r\n              id=\"badgeType\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeType\",\r\n              }}\r\n              value={badgeType}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"evidenceRequired\"\r\n              label=\"Evidence Required\"\r\n              id=\"evidenceRequired\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n              }}\r\n              value={evidenceRequired}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"userRequestable\"\r\n              label=\"User Requestable\"\r\n              id=\"userRequestable\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_userRequestable\",\r\n              }}\r\n              value={userRequestable}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"owners\"\r\n              label=\"Owners of Badge\"\r\n              id=\"owners\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_owners\",\r\n              }}\r\n              value={owners}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              \r\n              name=\"reviewers\"\r\n              label=\"Reviewers of Badge\"\r\n              id=\"reviewers\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_reviewers\",\r\n              }}\r\n              value={reviewers}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"badgeDetails_assignButton\" \r\n              onClick={handleAssignBadgeButtonClick}>\r\n              Assign Badge\r\n        </Button>\r\n        <Dialog open={assignBadgeButtonClicked} onClose={handleAssignBadgeButtonClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Assign Badge</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To assign this badge to many users, enter all email addresses here separated with a comma\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"assigneeEmail\"\r\n            label=\"Assignee Emails\"\r\n            type=\"url\"\r\n            fullWidth\r\n            onChange={handleAssigneeEmailChange}\r\n            value={assigneeEmail}\r\n            required\r\n            inputProps={{\r\n              \"data-testid\": \"badgeDetails_assigneeEmail\",\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAssignBadgeButtonClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleAssignBadge} data-testid=\"badgeDetails_assignBadge\"  color=\"primary\">\r\n            Assign Badge\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            data-testid=\"badgeDetails_backButton\" \r\n            onClick={handleBackButtonClick}>\r\n            Back to Badges\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <label>{assignBadgeResult}</label>\r\n        <input type=\"text\" hidden data-testid='badgeDetails_AssignResult' value={assignBadgeResult} readOnly />\r\n      </div>\r\n    </Container>\r\n  );\r\n      }\r\n\r\nelse {\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        {/* <Avatar className={classes.avatar}>\r\n          <CardMembershipOutlinedIcon />\r\n        </Avatar> */}\r\n        <Typography >\r\n          {/* <CardMembershipOutlinedIcon /> */}\r\n          <img src={icon} width=\"150\"/>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Badge Details\r\n      </Typography>\r\n        <br></br>\r\n        {/* <form className={classes.form} noValidate> */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              name=\"badgeName\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n\r\n              id=\"badgeName\"\r\n              label=\"Badge Name\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeName\",\r\n              }}\r\n              value={badgeName}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              id=\"badgeDescription\"\r\n              label=\"Badge Description\"\r\n              name=\"badgeDescription\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeDescription\",\r\n              }}\r\n              value={badgeDescriptoion}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"createdDate\"\r\n              label=\"Created Date\"\r\n              name=\"createdDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgedetails_createdDate\",\r\n              }}\r\n              value={createdDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"modifiedDate\"\r\n              label=\"modified Date\"\r\n              name=\"modifiedDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_modifiedDate\",\r\n              }}\r\n              value={modifiedDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"link\"\r\n              label=\"Link\"\r\n              id=\"link\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_link\",\r\n              }}\r\n              value={link}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"badgeType\"\r\n              label=\"Badge Type\"\r\n              id=\"badgeType\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeType\",\r\n              }}\r\n              value={badgeType}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"evidenceRequired\"\r\n              label=\"Evidence Required\"\r\n              id=\"evidenceRequired\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n              }}\r\n              value={evidenceRequired}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"userRequestable\"\r\n              label=\"User Requestable\"\r\n              id=\"userRequestable\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_userRequestable\",\r\n              }}\r\n              value={userRequestable}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"owners\"\r\n              label=\"Owners of Badge\"\r\n              id=\"owners\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_owners\",\r\n              }}\r\n              value={owners}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              \r\n              name=\"reviewers\"\r\n              label=\"Reviewers of Badge\"\r\n              id=\"reviewers\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_reviewers\",\r\n              }}\r\n              value={reviewers}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"badgeDetails_requestButton\" \r\n              onClick={handleRequestBadgeButtonClick}>\r\n              Request Badge\r\n        </Button>\r\n        <Dialog open={requestBadgeButtonClicked} onClose={handleRequestBadgeButtonClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Request Badge</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To request badge please enter your Evidence Link\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"workLink\"\r\n            label=\"Evidence Link\"\r\n            type=\"url\"\r\n            fullWidth\r\n            onChange={handleWorkLinkChange}\r\n            value={workLink}\r\n            required\r\n            inputProps={{\r\n              \"data-testid\": \"badgeDetails_workLink\",\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleRequestBadgeButtonClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handlerequestBadge} data-testid=\"badgeDetails_applyBadge\"  color=\"primary\">\r\n            Request Badge\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            data-testid=\"badgeDetails_backButton\" \r\n            onClick={handleBackButtonClick} >\r\n            Back to Badges\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <label>{requestBadgeResult}</label>\r\n        <input type=\"text\" hidden data-testid='badgeDetails_RequestResult' value={requestBadgeResult} readOnly />\r\n      </div>\r\n    </Container>\r\n  );\r\n      } \r\n\r\n}\r\n  //   }\r\n  // }\r\n};\r\n\r\nexport default BadgeDetailsForm;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\ViewBadgeAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddLinkedInCertificateAPI.js",["624"],"const getLinkedInResponse = async(name,issueMonth,issueYear,url) => {\r\n\r\n    var url = 'https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=' + name + '&organizationId=16198010&issueYear=' + issueYear+'&issueMonth='+issueMonth+'&certUrl='+url;\r\n    \r\n    window.open(url);\r\n    \r\n}\r\n\r\nexport default getLinkedInResponse;","C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateUserDetailsAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateUserBadgeStatusAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddNewUserAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\AddNewAssertionAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateBadgeAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\BadgeDetailsByNameAPI.js",[],["625","626"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\UI\\src\\API\\UpdateAssertionAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\index.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\reportWebVitals.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\App.js",["627","628","629"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\LoginForm.js",["630","631","632","633","634","635","636","637","638","639","640","641","642","643","644"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\RegistrationForm.js",["645","646","647","648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\CreateBadgeForm.js",["666","667","668","669","670","671","672"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\CertificatePublicLinkForm.js",["673","674","675","676","677","678","679","680","681","682","683","684","685","686","687"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ForgotPasswordForm.js",["688","689","690","691"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\LandingForm.js",["692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\LoginAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\RegistrationAPI.js",["709"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\CreateBadgeAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AssertionDetailsByIdAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\scripts\\functions.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\SendPasswordResetEmailAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddJIRARequestAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UserDetailsByEmailAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\MyBackpackForm.js",["710","711","712","713","714","715","716","717"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewUsersForm.js",["718","719","720","721","722","723","724","725","726","727"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewProfileForm.js",["728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewBadgeForm.js",["752","753","754","755","756","757","758","759","760","761","762","763"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\ViewAssertionsForm.js",["764","765","766","767","768","769","770","771","772","773","774","775","776"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\MyBackpackAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\MyBackpackDetailsForm.js",["777","778","779","780","781","782","783","784","785"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewUsersAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\UserDetailsForm.js",["786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\AssertionDetailsForm.js",["803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\AddUserForm.js",["832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ModifyUsersAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewBadgeAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\forms\\BadgeDetailsForm.js",["865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewAssertionForReviewersAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\ViewAssertionsAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddLinkedInCertificateAPI.js",["897"],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateUserDetailsAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateUserBadgeStatusAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddNewUserAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateAssertionAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\AddNewAssertionAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\UpdateBadgeAPI.js",[],"C:\\Badger_V1\\DXC-Industrialized-AI-Badge-Platform\\ui\\src\\API\\BadgeDetailsByNameAPI.js",[],{"ruleId":"898","replacedBy":"899"},{"ruleId":"900","replacedBy":"901"},{"ruleId":"902","severity":1,"message":"903","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":24},{"ruleId":"902","severity":1,"message":"906","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":23},{"ruleId":"902","severity":1,"message":"907","line":10,"column":3,"nodeType":"904","messageId":"905","endLine":10,"endColumn":7},{"ruleId":"902","severity":1,"message":"903","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":70,"column":21,"nodeType":"910","messageId":"911","endLine":70,"endColumn":23},{"ruleId":"908","severity":1,"message":"909","line":70,"column":43,"nodeType":"910","messageId":"911","endLine":70,"endColumn":45},{"ruleId":"908","severity":1,"message":"909","line":70,"column":58,"nodeType":"910","messageId":"911","endLine":70,"endColumn":60},{"ruleId":"908","severity":1,"message":"909","line":70,"column":69,"nodeType":"910","messageId":"911","endLine":70,"endColumn":71},{"ruleId":"908","severity":1,"message":"909","line":70,"column":83,"nodeType":"910","messageId":"911","endLine":70,"endColumn":85},{"ruleId":"902","severity":1,"message":"912","line":77,"column":13,"nodeType":"904","messageId":"905","endLine":77,"endColumn":21},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"917","line":23,"column":10,"nodeType":"904","messageId":"905","endLine":23,"endColumn":20},{"ruleId":"902","severity":1,"message":"918","line":41,"column":9,"nodeType":"904","messageId":"905","endLine":41,"endColumn":31},{"ruleId":"908","severity":1,"message":"919","line":94,"column":18,"nodeType":"910","messageId":"911","endLine":94,"endColumn":20},{"ruleId":"902","severity":1,"message":"912","line":100,"column":11,"nodeType":"904","messageId":"905","endLine":100,"endColumn":19},{"ruleId":"902","severity":1,"message":"920","line":108,"column":9,"nodeType":"904","messageId":"905","endLine":108,"endColumn":20},{"ruleId":"908","severity":1,"message":"909","line":112,"column":16,"nodeType":"910","messageId":"911","endLine":112,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":121,"column":18,"nodeType":"910","messageId":"911","endLine":121,"endColumn":20},{"ruleId":"908","severity":1,"message":"909","line":151,"column":48,"nodeType":"910","messageId":"911","endLine":151,"endColumn":50},{"ruleId":"908","severity":1,"message":"909","line":151,"column":71,"nodeType":"910","messageId":"911","endLine":151,"endColumn":73},{"ruleId":"908","severity":1,"message":"909","line":169,"column":47,"nodeType":"910","messageId":"911","endLine":169,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":169,"column":69,"nodeType":"910","messageId":"911","endLine":169,"endColumn":71},{"ruleId":"908","severity":1,"message":"909","line":202,"column":44,"nodeType":"910","messageId":"911","endLine":202,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":202,"column":63,"nodeType":"910","messageId":"911","endLine":202,"endColumn":65},{"ruleId":"908","severity":1,"message":"909","line":218,"column":47,"nodeType":"910","messageId":"911","endLine":218,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":218,"column":65,"nodeType":"910","messageId":"911","endLine":218,"endColumn":67},{"ruleId":"908","severity":1,"message":"909","line":236,"column":54,"nodeType":"910","messageId":"911","endLine":236,"endColumn":56},{"ruleId":"908","severity":1,"message":"909","line":236,"column":76,"nodeType":"910","messageId":"911","endLine":236,"endColumn":78},{"ruleId":"902","severity":1,"message":"914","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":16},{"ruleId":"902","severity":1,"message":"916","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":11},{"ruleId":"902","severity":1,"message":"921","line":20,"column":8,"nodeType":"904","messageId":"905","endLine":20,"endColumn":23},{"ruleId":"902","severity":1,"message":"922","line":21,"column":8,"nodeType":"904","messageId":"905","endLine":21,"endColumn":18},{"ruleId":"902","severity":1,"message":"912","line":74,"column":13,"nodeType":"904","messageId":"905","endLine":74,"endColumn":21},{"ruleId":"908","severity":1,"message":"909","line":83,"column":15,"nodeType":"910","messageId":"911","endLine":83,"endColumn":17},{"ruleId":"908","severity":1,"message":"909","line":83,"column":55,"nodeType":"910","messageId":"911","endLine":83,"endColumn":57},{"ruleId":"908","severity":1,"message":"909","line":83,"column":95,"nodeType":"910","messageId":"911","endLine":83,"endColumn":97},{"ruleId":"908","severity":1,"message":"909","line":95,"column":22,"nodeType":"910","messageId":"911","endLine":95,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":104,"column":26,"nodeType":"910","messageId":"911","endLine":104,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":133,"column":44,"nodeType":"910","messageId":"911","endLine":133,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":133,"column":63,"nodeType":"910","messageId":"911","endLine":133,"endColumn":65},{"ruleId":"908","severity":1,"message":"909","line":152,"column":47,"nodeType":"910","messageId":"911","endLine":152,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":152,"column":69,"nodeType":"910","messageId":"911","endLine":152,"endColumn":71},{"ruleId":"902","severity":1,"message":"913","line":1,"column":26,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"923","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":14},{"ruleId":"902","severity":1,"message":"914","line":6,"column":8,"nodeType":"904","messageId":"905","endLine":6,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":7,"column":8,"nodeType":"904","messageId":"905","endLine":7,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":24},{"ruleId":"902","severity":1,"message":"925","line":17,"column":8,"nodeType":"904","messageId":"905","endLine":17,"endColumn":19},{"ruleId":"902","severity":1,"message":"926","line":20,"column":8,"nodeType":"904","messageId":"905","endLine":20,"endColumn":26},{"ruleId":"902","severity":1,"message":"927","line":25,"column":20,"nodeType":"904","messageId":"905","endLine":25,"endColumn":26},{"ruleId":"902","severity":1,"message":"928","line":26,"column":3,"nodeType":"904","messageId":"905","endLine":26,"endColumn":9},{"ruleId":"902","severity":1,"message":"929","line":27,"column":3,"nodeType":"904","messageId":"905","endLine":27,"endColumn":8},{"ruleId":"902","severity":1,"message":"930","line":91,"column":11,"nodeType":"904","messageId":"905","endLine":91,"endColumn":20},{"ruleId":"908","severity":1,"message":"919","line":94,"column":21,"nodeType":"910","messageId":"911","endLine":94,"endColumn":23},{"ruleId":"931","severity":1,"message":"932","line":113,"column":8,"nodeType":"933","endLine":113,"endColumn":10,"suggestions":"934"},{"ruleId":"902","severity":1,"message":"935","line":1,"column":17,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"916","line":6,"column":8,"nodeType":"904","messageId":"905","endLine":6,"endColumn":11},{"ruleId":"902","severity":1,"message":"907","line":17,"column":8,"nodeType":"904","messageId":"905","endLine":17,"endColumn":12},{"ruleId":"902","severity":1,"message":"936","line":53,"column":21,"nodeType":"904","messageId":"905","endLine":53,"endColumn":32},{"ruleId":"902","severity":1,"message":"937","line":54,"column":18,"nodeType":"904","messageId":"905","endLine":54,"endColumn":26},{"ruleId":"902","severity":1,"message":"912","line":89,"column":11,"nodeType":"904","messageId":"905","endLine":89,"endColumn":19},{"ruleId":"902","severity":1,"message":"930","line":297,"column":9,"nodeType":"904","messageId":"905","endLine":297,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":300,"column":19,"nodeType":"910","messageId":"911","endLine":300,"endColumn":21},{"ruleId":"931","severity":1,"message":"938","line":314,"column":4,"nodeType":"933","endLine":314,"endColumn":6,"suggestions":"939"},{"ruleId":"908","severity":1,"message":"909","line":361,"column":18,"nodeType":"910","messageId":"911","endLine":361,"endColumn":20},{"ruleId":"908","severity":1,"message":"909","line":361,"column":89,"nodeType":"910","messageId":"911","endLine":361,"endColumn":91},{"ruleId":"908","severity":1,"message":"909","line":370,"column":28,"nodeType":"910","messageId":"911","endLine":370,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":371,"column":28,"nodeType":"910","messageId":"911","endLine":371,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":372,"column":28,"nodeType":"910","messageId":"911","endLine":372,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":373,"column":28,"nodeType":"910","messageId":"911","endLine":373,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":374,"column":28,"nodeType":"910","messageId":"911","endLine":374,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":375,"column":28,"nodeType":"910","messageId":"911","endLine":375,"endColumn":30},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"912","line":49,"column":13,"nodeType":"904","messageId":"905","endLine":49,"endColumn":21},{"ruleId":"908","severity":1,"message":"909","line":78,"column":44,"nodeType":"910","messageId":"911","endLine":78,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":78,"column":63,"nodeType":"910","messageId":"911","endLine":78,"endColumn":65},{"ruleId":"940","severity":1,"message":"941","line":3,"column":120,"nodeType":"910","messageId":"942","endLine":3,"endColumn":121},{"ruleId":"902","severity":1,"message":"943","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":18},{"ruleId":"902","severity":1,"message":"907","line":15,"column":8,"nodeType":"904","messageId":"905","endLine":15,"endColumn":12},{"ruleId":"902","severity":1,"message":"944","line":23,"column":15,"nodeType":"904","messageId":"905","endLine":23,"endColumn":24},{"ruleId":"902","severity":1,"message":"930","line":77,"column":9,"nodeType":"904","messageId":"905","endLine":77,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":80,"column":17,"nodeType":"910","messageId":"911","endLine":80,"endColumn":19},{"ruleId":"931","severity":1,"message":"945","line":97,"column":8,"nodeType":"933","endLine":97,"endColumn":10,"suggestions":"946"},{"ruleId":"902","severity":1,"message":"947","line":99,"column":13,"nodeType":"904","messageId":"905","endLine":99,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":103,"column":28,"nodeType":"910","messageId":"911","endLine":103,"endColumn":30},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"950","line":18,"column":8,"nodeType":"904","messageId":"905","endLine":18,"endColumn":20},{"ruleId":"902","severity":1,"message":"951","line":21,"column":8,"nodeType":"904","messageId":"905","endLine":21,"endColumn":16},{"ruleId":"902","severity":1,"message":"952","line":22,"column":8,"nodeType":"904","messageId":"905","endLine":22,"endColumn":14},{"ruleId":"902","severity":1,"message":"953","line":23,"column":10,"nodeType":"904","messageId":"905","endLine":23,"endColumn":20},{"ruleId":"902","severity":1,"message":"937","line":30,"column":19,"nodeType":"904","messageId":"905","endLine":30,"endColumn":27},{"ruleId":"902","severity":1,"message":"954","line":39,"column":20,"nodeType":"904","messageId":"905","endLine":39,"endColumn":29},{"ruleId":"902","severity":1,"message":"930","line":71,"column":13,"nodeType":"904","messageId":"905","endLine":71,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":74,"column":23,"nodeType":"910","messageId":"911","endLine":74,"endColumn":25},{"ruleId":"902","severity":1,"message":"955","line":92,"column":13,"nodeType":"904","messageId":"905","endLine":92,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":95,"column":22,"nodeType":"910","messageId":"911","endLine":95,"endColumn":24},{"ruleId":"902","severity":1,"message":"956","line":102,"column":11,"nodeType":"904","messageId":"905","endLine":102,"endColumn":32},{"ruleId":"931","severity":1,"message":"938","line":108,"column":8,"nodeType":"933","endLine":108,"endColumn":10,"suggestions":"957"},{"ruleId":"902","severity":1,"message":"958","line":110,"column":11,"nodeType":"904","messageId":"905","endLine":110,"endColumn":31},{"ruleId":"902","severity":1,"message":"959","line":114,"column":11,"nodeType":"904","messageId":"905","endLine":114,"endColumn":33},{"ruleId":"908","severity":1,"message":"909","line":140,"column":26,"nodeType":"910","messageId":"911","endLine":140,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":300,"column":47,"nodeType":"910","messageId":"911","endLine":300,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"960","line":11,"column":8,"nodeType":"904","messageId":"905","endLine":11,"endColumn":14},{"ruleId":"902","severity":1,"message":"961","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":28},{"ruleId":"902","severity":1,"message":"962","line":14,"column":8,"nodeType":"904","messageId":"905","endLine":14,"endColumn":33},{"ruleId":"902","severity":1,"message":"963","line":28,"column":18,"nodeType":"904","messageId":"905","endLine":28,"endColumn":27},{"ruleId":"902","severity":1,"message":"930","line":58,"column":9,"nodeType":"904","messageId":"905","endLine":58,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":61,"column":17,"nodeType":"910","messageId":"911","endLine":61,"endColumn":19},{"ruleId":"931","severity":1,"message":"964","line":78,"column":6,"nodeType":"933","endLine":78,"endColumn":8,"suggestions":"965"},{"ruleId":"908","severity":1,"message":"909","line":80,"column":24,"nodeType":"910","messageId":"911","endLine":80,"endColumn":26},{"ruleId":"908","severity":1,"message":"909","line":82,"column":23,"nodeType":"910","messageId":"911","endLine":82,"endColumn":25},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"960","line":11,"column":8,"nodeType":"904","messageId":"905","endLine":11,"endColumn":14},{"ruleId":"902","severity":1,"message":"937","line":22,"column":18,"nodeType":"904","messageId":"905","endLine":22,"endColumn":26},{"ruleId":"902","severity":1,"message":"936","line":23,"column":19,"nodeType":"904","messageId":"905","endLine":23,"endColumn":30},{"ruleId":"902","severity":1,"message":"963","line":24,"column":17,"nodeType":"904","messageId":"905","endLine":24,"endColumn":26},{"ruleId":"902","severity":1,"message":"966","line":47,"column":9,"nodeType":"904","messageId":"905","endLine":47,"endColumn":16},{"ruleId":"908","severity":1,"message":"909","line":51,"column":17,"nodeType":"910","messageId":"911","endLine":51,"endColumn":19},{"ruleId":"908","severity":1,"message":"919","line":55,"column":19,"nodeType":"910","messageId":"911","endLine":55,"endColumn":21},{"ruleId":"967","severity":1,"message":"968","line":68,"column":9,"nodeType":"904","messageId":"969","endLine":68,"endColumn":18},{"ruleId":"902","severity":1,"message":"930","line":68,"column":9,"nodeType":"904","messageId":"905","endLine":68,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":71,"column":17,"nodeType":"910","messageId":"911","endLine":71,"endColumn":19},{"ruleId":"931","severity":1,"message":"970","line":92,"column":6,"nodeType":"933","endLine":92,"endColumn":8,"suggestions":"971"},{"ruleId":"908","severity":1,"message":"909","line":94,"column":28,"nodeType":"910","messageId":"911","endLine":94,"endColumn":30},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"936","line":20,"column":20,"nodeType":"904","messageId":"905","endLine":20,"endColumn":31},{"ruleId":"902","severity":1,"message":"963","line":21,"column":18,"nodeType":"904","messageId":"905","endLine":21,"endColumn":27},{"ruleId":"902","severity":1,"message":"972","line":31,"column":10,"nodeType":"904","messageId":"905","endLine":31,"endColumn":23},{"ruleId":"902","severity":1,"message":"973","line":31,"column":24,"nodeType":"904","messageId":"905","endLine":31,"endColumn":40},{"ruleId":"902","severity":1,"message":"966","line":60,"column":9,"nodeType":"904","messageId":"905","endLine":60,"endColumn":16},{"ruleId":"902","severity":1,"message":"930","line":65,"column":9,"nodeType":"904","messageId":"905","endLine":65,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":68,"column":17,"nodeType":"910","messageId":"911","endLine":68,"endColumn":19},{"ruleId":"931","severity":1,"message":"974","line":89,"column":6,"nodeType":"933","endLine":89,"endColumn":8,"suggestions":"975"},{"ruleId":"908","severity":1,"message":"909","line":91,"column":21,"nodeType":"910","messageId":"911","endLine":91,"endColumn":23},{"ruleId":"976","severity":1,"message":"977","line":117,"column":28,"nodeType":"978","endLine":117,"endColumn":61},{"ruleId":"908","severity":1,"message":"909","line":122,"column":26,"nodeType":"910","messageId":"911","endLine":122,"endColumn":28},{"ruleId":"902","severity":1,"message":"913","line":1,"column":26,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"979","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":34},{"ruleId":"902","severity":1,"message":"930","line":84,"column":13,"nodeType":"904","messageId":"905","endLine":84,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":89,"column":23,"nodeType":"910","messageId":"911","endLine":89,"endColumn":25},{"ruleId":"902","severity":1,"message":"930","line":100,"column":13,"nodeType":"904","messageId":"905","endLine":100,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":104,"column":23,"nodeType":"910","messageId":"911","endLine":104,"endColumn":25},{"ruleId":"931","severity":1,"message":"980","line":131,"column":8,"nodeType":"933","endLine":131,"endColumn":10,"suggestions":"981"},{"ruleId":"908","severity":1,"message":"909","line":133,"column":26,"nodeType":"910","messageId":"911","endLine":133,"endColumn":28},{"ruleId":"976","severity":1,"message":"977","line":150,"column":17,"nodeType":"978","endLine":150,"endColumn":51},{"ruleId":"902","severity":1,"message":"913","line":1,"column":26,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"982","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":14},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"979","line":19,"column":8,"nodeType":"904","messageId":"905","endLine":19,"endColumn":34},{"ruleId":"902","severity":1,"message":"937","line":45,"column":18,"nodeType":"904","messageId":"905","endLine":45,"endColumn":26},{"ruleId":"902","severity":1,"message":"936","line":47,"column":21,"nodeType":"904","messageId":"905","endLine":47,"endColumn":32},{"ruleId":"902","severity":1,"message":"930","line":75,"column":13,"nodeType":"904","messageId":"905","endLine":75,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":78,"column":23,"nodeType":"910","messageId":"911","endLine":78,"endColumn":25},{"ruleId":"908","severity":1,"message":"919","line":86,"column":45,"nodeType":"910","messageId":"911","endLine":86,"endColumn":47},{"ruleId":"908","severity":1,"message":"909","line":102,"column":17,"nodeType":"910","messageId":"911","endLine":102,"endColumn":19},{"ruleId":"908","severity":1,"message":"909","line":107,"column":22,"nodeType":"910","messageId":"911","endLine":107,"endColumn":24},{"ruleId":"967","severity":1,"message":"983","line":116,"column":13,"nodeType":"904","messageId":"969","endLine":116,"endColumn":22},{"ruleId":"902","severity":1,"message":"955","line":116,"column":13,"nodeType":"904","messageId":"905","endLine":116,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":120,"column":22,"nodeType":"910","messageId":"911","endLine":120,"endColumn":24},{"ruleId":"902","severity":1,"message":"984","line":131,"column":11,"nodeType":"904","messageId":"905","endLine":131,"endColumn":32},{"ruleId":"902","severity":1,"message":"930","line":133,"column":13,"nodeType":"904","messageId":"905","endLine":133,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":136,"column":23,"nodeType":"910","messageId":"911","endLine":136,"endColumn":25},{"ruleId":"931","severity":1,"message":"980","line":153,"column":8,"nodeType":"933","endLine":153,"endColumn":10,"suggestions":"985"},{"ruleId":"908","severity":1,"message":"909","line":175,"column":26,"nodeType":"910","messageId":"911","endLine":175,"endColumn":28},{"ruleId":"976","severity":1,"message":"977","line":192,"column":17,"nodeType":"978","endLine":192,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":307,"column":47,"nodeType":"910","messageId":"911","endLine":307,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":350,"column":47,"nodeType":"910","messageId":"911","endLine":350,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":392,"column":47,"nodeType":"910","messageId":"911","endLine":392,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"986","line":1,"column":33,"nodeType":"904","messageId":"905","endLine":1,"endColumn":42},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"962","line":17,"column":8,"nodeType":"904","messageId":"905","endLine":17,"endColumn":33},{"ruleId":"902","severity":1,"message":"922","line":19,"column":8,"nodeType":"904","messageId":"905","endLine":19,"endColumn":18},{"ruleId":"902","severity":1,"message":"987","line":25,"column":8,"nodeType":"904","messageId":"905","endLine":25,"endColumn":17},{"ruleId":"908","severity":1,"message":"919","line":85,"column":22,"nodeType":"910","messageId":"911","endLine":85,"endColumn":24},{"ruleId":"902","severity":1,"message":"955","line":91,"column":13,"nodeType":"904","messageId":"905","endLine":91,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":94,"column":22,"nodeType":"910","messageId":"911","endLine":94,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":159,"column":26,"nodeType":"910","messageId":"911","endLine":159,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":191,"column":58,"nodeType":"910","messageId":"911","endLine":191,"endColumn":60},{"ruleId":"908","severity":1,"message":"909","line":191,"column":81,"nodeType":"910","messageId":"911","endLine":191,"endColumn":83},{"ruleId":"908","severity":1,"message":"909","line":209,"column":59,"nodeType":"910","messageId":"911","endLine":209,"endColumn":61},{"ruleId":"908","severity":1,"message":"909","line":209,"column":83,"nodeType":"910","messageId":"911","endLine":209,"endColumn":85},{"ruleId":"908","severity":1,"message":"909","line":226,"column":57,"nodeType":"910","messageId":"911","endLine":226,"endColumn":59},{"ruleId":"908","severity":1,"message":"909","line":226,"column":79,"nodeType":"910","messageId":"911","endLine":226,"endColumn":81},{"ruleId":"908","severity":1,"message":"909","line":243,"column":54,"nodeType":"910","messageId":"911","endLine":243,"endColumn":56},{"ruleId":"908","severity":1,"message":"909","line":243,"column":73,"nodeType":"910","messageId":"911","endLine":243,"endColumn":75},{"ruleId":"908","severity":1,"message":"909","line":264,"column":57,"nodeType":"910","messageId":"911","endLine":264,"endColumn":59},{"ruleId":"908","severity":1,"message":"909","line":264,"column":79,"nodeType":"910","messageId":"911","endLine":264,"endColumn":81},{"ruleId":"908","severity":1,"message":"909","line":287,"column":57,"nodeType":"910","messageId":"911","endLine":287,"endColumn":59},{"ruleId":"908","severity":1,"message":"909","line":287,"column":75,"nodeType":"910","messageId":"911","endLine":287,"endColumn":77},{"ruleId":"908","severity":1,"message":"909","line":305,"column":64,"nodeType":"910","messageId":"911","endLine":305,"endColumn":66},{"ruleId":"908","severity":1,"message":"909","line":305,"column":86,"nodeType":"910","messageId":"911","endLine":305,"endColumn":88},{"ruleId":"908","severity":1,"message":"909","line":322,"column":65,"nodeType":"910","messageId":"911","endLine":322,"endColumn":67},{"ruleId":"908","severity":1,"message":"909","line":322,"column":95,"nodeType":"910","messageId":"911","endLine":322,"endColumn":97},{"ruleId":"908","severity":1,"message":"909","line":335,"column":47,"nodeType":"910","messageId":"911","endLine":335,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"937","line":29,"column":19,"nodeType":"904","messageId":"905","endLine":29,"endColumn":27},{"ruleId":"902","severity":1,"message":"988","line":38,"column":21,"nodeType":"904","messageId":"905","endLine":38,"endColumn":31},{"ruleId":"902","severity":1,"message":"930","line":70,"column":13,"nodeType":"904","messageId":"905","endLine":70,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":73,"column":23,"nodeType":"910","messageId":"911","endLine":73,"endColumn":25},{"ruleId":"902","severity":1,"message":"955","line":91,"column":13,"nodeType":"904","messageId":"905","endLine":91,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":94,"column":22,"nodeType":"910","messageId":"911","endLine":94,"endColumn":24},{"ruleId":"931","severity":1,"message":"938","line":107,"column":8,"nodeType":"933","endLine":107,"endColumn":10,"suggestions":"989"},{"ruleId":"908","severity":1,"message":"909","line":139,"column":26,"nodeType":"910","messageId":"911","endLine":139,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":341,"column":47,"nodeType":"910","messageId":"911","endLine":341,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"982","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":14},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"979","line":19,"column":8,"nodeType":"904","messageId":"905","endLine":19,"endColumn":34},{"ruleId":"902","severity":1,"message":"990","line":22,"column":22,"nodeType":"904","messageId":"905","endLine":22,"endColumn":30},{"ruleId":"902","severity":1,"message":"936","line":39,"column":20,"nodeType":"904","messageId":"905","endLine":39,"endColumn":31},{"ruleId":"902","severity":1,"message":"963","line":40,"column":18,"nodeType":"904","messageId":"905","endLine":40,"endColumn":27},{"ruleId":"902","severity":1,"message":"991","line":41,"column":21,"nodeType":"904","messageId":"905","endLine":41,"endColumn":33},{"ruleId":"902","severity":1,"message":"955","line":130,"column":9,"nodeType":"904","messageId":"905","endLine":130,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":133,"column":16,"nodeType":"910","messageId":"911","endLine":133,"endColumn":18},{"ruleId":"902","severity":1,"message":"992","line":161,"column":9,"nodeType":"904","messageId":"905","endLine":161,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":164,"column":17,"nodeType":"910","messageId":"911","endLine":164,"endColumn":19},{"ruleId":"902","severity":1,"message":"993","line":174,"column":9,"nodeType":"904","messageId":"905","endLine":174,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":177,"column":17,"nodeType":"910","messageId":"911","endLine":177,"endColumn":19},{"ruleId":"902","severity":1,"message":"994","line":181,"column":9,"nodeType":"904","messageId":"905","endLine":181,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":184,"column":17,"nodeType":"910","messageId":"911","endLine":184,"endColumn":19},{"ruleId":"902","severity":1,"message":"930","line":194,"column":9,"nodeType":"904","messageId":"905","endLine":194,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":197,"column":17,"nodeType":"910","messageId":"911","endLine":197,"endColumn":19},{"ruleId":"931","severity":1,"message":"995","line":218,"column":6,"nodeType":"933","endLine":218,"endColumn":8,"suggestions":"996"},{"ruleId":"908","severity":1,"message":"909","line":221,"column":22,"nodeType":"910","messageId":"911","endLine":221,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":227,"column":13,"nodeType":"910","messageId":"911","endLine":227,"endColumn":15},{"ruleId":"976","severity":1,"message":"977","line":234,"column":11,"nodeType":"978","endLine":234,"endColumn":40},{"ruleId":"908","severity":1,"message":"909","line":448,"column":33,"nodeType":"910","messageId":"911","endLine":448,"endColumn":35},{"ruleId":"908","severity":1,"message":"909","line":477,"column":18,"nodeType":"910","messageId":"911","endLine":477,"endColumn":20},{"ruleId":"976","severity":1,"message":"977","line":483,"column":11,"nodeType":"978","endLine":483,"endColumn":40},{"ruleId":"976","severity":1,"message":"977","line":700,"column":11,"nodeType":"978","endLine":700,"endColumn":40},{"ruleId":"967","severity":1,"message":"997","line":3,"column":9,"nodeType":"904","messageId":"969","endLine":3,"endColumn":12},{"ruleId":"898","replacedBy":"998"},{"ruleId":"900","replacedBy":"999"},{"ruleId":"902","severity":1,"message":"903","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":24},{"ruleId":"902","severity":1,"message":"906","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":23},{"ruleId":"902","severity":1,"message":"907","line":10,"column":3,"nodeType":"904","messageId":"905","endLine":10,"endColumn":7},{"ruleId":"902","severity":1,"message":"914","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":16},{"ruleId":"902","severity":1,"message":"916","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":11},{"ruleId":"902","severity":1,"message":"921","line":20,"column":8,"nodeType":"904","messageId":"905","endLine":20,"endColumn":23},{"ruleId":"902","severity":1,"message":"922","line":21,"column":8,"nodeType":"904","messageId":"905","endLine":21,"endColumn":18},{"ruleId":"902","severity":1,"message":"912","line":74,"column":13,"nodeType":"904","messageId":"905","endLine":74,"endColumn":21},{"ruleId":"908","severity":1,"message":"909","line":83,"column":15,"nodeType":"910","messageId":"911","endLine":83,"endColumn":17},{"ruleId":"908","severity":1,"message":"909","line":83,"column":55,"nodeType":"910","messageId":"911","endLine":83,"endColumn":57},{"ruleId":"908","severity":1,"message":"909","line":83,"column":95,"nodeType":"910","messageId":"911","endLine":83,"endColumn":97},{"ruleId":"908","severity":1,"message":"909","line":95,"column":22,"nodeType":"910","messageId":"911","endLine":95,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":104,"column":26,"nodeType":"910","messageId":"911","endLine":104,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":133,"column":44,"nodeType":"910","messageId":"911","endLine":133,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":133,"column":63,"nodeType":"910","messageId":"911","endLine":133,"endColumn":65},{"ruleId":"908","severity":1,"message":"909","line":152,"column":47,"nodeType":"910","messageId":"911","endLine":152,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":152,"column":69,"nodeType":"910","messageId":"911","endLine":152,"endColumn":71},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"917","line":23,"column":10,"nodeType":"904","messageId":"905","endLine":23,"endColumn":20},{"ruleId":"902","severity":1,"message":"918","line":41,"column":9,"nodeType":"904","messageId":"905","endLine":41,"endColumn":31},{"ruleId":"908","severity":1,"message":"919","line":94,"column":18,"nodeType":"910","messageId":"911","endLine":94,"endColumn":20},{"ruleId":"902","severity":1,"message":"912","line":100,"column":11,"nodeType":"904","messageId":"905","endLine":100,"endColumn":19},{"ruleId":"902","severity":1,"message":"920","line":108,"column":9,"nodeType":"904","messageId":"905","endLine":108,"endColumn":20},{"ruleId":"908","severity":1,"message":"909","line":112,"column":16,"nodeType":"910","messageId":"911","endLine":112,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":121,"column":18,"nodeType":"910","messageId":"911","endLine":121,"endColumn":20},{"ruleId":"908","severity":1,"message":"909","line":151,"column":48,"nodeType":"910","messageId":"911","endLine":151,"endColumn":50},{"ruleId":"908","severity":1,"message":"909","line":151,"column":71,"nodeType":"910","messageId":"911","endLine":151,"endColumn":73},{"ruleId":"908","severity":1,"message":"909","line":169,"column":47,"nodeType":"910","messageId":"911","endLine":169,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":169,"column":69,"nodeType":"910","messageId":"911","endLine":169,"endColumn":71},{"ruleId":"908","severity":1,"message":"909","line":202,"column":44,"nodeType":"910","messageId":"911","endLine":202,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":202,"column":63,"nodeType":"910","messageId":"911","endLine":202,"endColumn":65},{"ruleId":"908","severity":1,"message":"909","line":218,"column":47,"nodeType":"910","messageId":"911","endLine":218,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":218,"column":65,"nodeType":"910","messageId":"911","endLine":218,"endColumn":67},{"ruleId":"908","severity":1,"message":"909","line":236,"column":54,"nodeType":"910","messageId":"911","endLine":236,"endColumn":56},{"ruleId":"908","severity":1,"message":"909","line":236,"column":76,"nodeType":"910","messageId":"911","endLine":236,"endColumn":78},{"ruleId":"902","severity":1,"message":"903","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":70,"column":21,"nodeType":"910","messageId":"911","endLine":70,"endColumn":23},{"ruleId":"908","severity":1,"message":"909","line":70,"column":43,"nodeType":"910","messageId":"911","endLine":70,"endColumn":45},{"ruleId":"908","severity":1,"message":"909","line":70,"column":58,"nodeType":"910","messageId":"911","endLine":70,"endColumn":60},{"ruleId":"908","severity":1,"message":"909","line":70,"column":69,"nodeType":"910","messageId":"911","endLine":70,"endColumn":71},{"ruleId":"908","severity":1,"message":"909","line":70,"column":83,"nodeType":"910","messageId":"911","endLine":70,"endColumn":85},{"ruleId":"902","severity":1,"message":"912","line":77,"column":13,"nodeType":"904","messageId":"905","endLine":77,"endColumn":21},{"ruleId":"902","severity":1,"message":"913","line":1,"column":26,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"923","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":14},{"ruleId":"902","severity":1,"message":"914","line":6,"column":8,"nodeType":"904","messageId":"905","endLine":6,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":7,"column":8,"nodeType":"904","messageId":"905","endLine":7,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":24},{"ruleId":"902","severity":1,"message":"925","line":17,"column":8,"nodeType":"904","messageId":"905","endLine":17,"endColumn":19},{"ruleId":"902","severity":1,"message":"926","line":20,"column":8,"nodeType":"904","messageId":"905","endLine":20,"endColumn":26},{"ruleId":"902","severity":1,"message":"927","line":25,"column":20,"nodeType":"904","messageId":"905","endLine":25,"endColumn":26},{"ruleId":"902","severity":1,"message":"928","line":26,"column":3,"nodeType":"904","messageId":"905","endLine":26,"endColumn":9},{"ruleId":"902","severity":1,"message":"929","line":27,"column":3,"nodeType":"904","messageId":"905","endLine":27,"endColumn":8},{"ruleId":"902","severity":1,"message":"930","line":91,"column":11,"nodeType":"904","messageId":"905","endLine":91,"endColumn":20},{"ruleId":"908","severity":1,"message":"919","line":94,"column":21,"nodeType":"910","messageId":"911","endLine":94,"endColumn":23},{"ruleId":"931","severity":1,"message":"932","line":113,"column":8,"nodeType":"933","endLine":113,"endColumn":10,"suggestions":"1000"},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"912","line":49,"column":13,"nodeType":"904","messageId":"905","endLine":49,"endColumn":21},{"ruleId":"908","severity":1,"message":"909","line":78,"column":44,"nodeType":"910","messageId":"911","endLine":78,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":78,"column":63,"nodeType":"910","messageId":"911","endLine":78,"endColumn":65},{"ruleId":"902","severity":1,"message":"935","line":1,"column":17,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"916","line":6,"column":8,"nodeType":"904","messageId":"905","endLine":6,"endColumn":11},{"ruleId":"902","severity":1,"message":"907","line":17,"column":8,"nodeType":"904","messageId":"905","endLine":17,"endColumn":12},{"ruleId":"902","severity":1,"message":"936","line":53,"column":21,"nodeType":"904","messageId":"905","endLine":53,"endColumn":32},{"ruleId":"902","severity":1,"message":"937","line":54,"column":18,"nodeType":"904","messageId":"905","endLine":54,"endColumn":26},{"ruleId":"902","severity":1,"message":"912","line":89,"column":11,"nodeType":"904","messageId":"905","endLine":89,"endColumn":19},{"ruleId":"902","severity":1,"message":"930","line":297,"column":9,"nodeType":"904","messageId":"905","endLine":297,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":300,"column":19,"nodeType":"910","messageId":"911","endLine":300,"endColumn":21},{"ruleId":"931","severity":1,"message":"938","line":314,"column":4,"nodeType":"933","endLine":314,"endColumn":6,"suggestions":"1001"},{"ruleId":"908","severity":1,"message":"909","line":361,"column":18,"nodeType":"910","messageId":"911","endLine":361,"endColumn":20},{"ruleId":"908","severity":1,"message":"909","line":361,"column":89,"nodeType":"910","messageId":"911","endLine":361,"endColumn":91},{"ruleId":"908","severity":1,"message":"909","line":370,"column":28,"nodeType":"910","messageId":"911","endLine":370,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":371,"column":28,"nodeType":"910","messageId":"911","endLine":371,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":372,"column":28,"nodeType":"910","messageId":"911","endLine":372,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":373,"column":28,"nodeType":"910","messageId":"911","endLine":373,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":374,"column":28,"nodeType":"910","messageId":"911","endLine":374,"endColumn":30},{"ruleId":"908","severity":1,"message":"909","line":375,"column":28,"nodeType":"910","messageId":"911","endLine":375,"endColumn":30},{"ruleId":"940","severity":1,"message":"941","line":3,"column":120,"nodeType":"910","messageId":"942","endLine":3,"endColumn":121},{"ruleId":"902","severity":1,"message":"943","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":18},{"ruleId":"902","severity":1,"message":"907","line":15,"column":8,"nodeType":"904","messageId":"905","endLine":15,"endColumn":12},{"ruleId":"902","severity":1,"message":"944","line":23,"column":15,"nodeType":"904","messageId":"905","endLine":23,"endColumn":24},{"ruleId":"902","severity":1,"message":"930","line":77,"column":9,"nodeType":"904","messageId":"905","endLine":77,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":80,"column":17,"nodeType":"910","messageId":"911","endLine":80,"endColumn":19},{"ruleId":"931","severity":1,"message":"945","line":97,"column":8,"nodeType":"933","endLine":97,"endColumn":10,"suggestions":"1002"},{"ruleId":"902","severity":1,"message":"947","line":99,"column":13,"nodeType":"904","messageId":"905","endLine":99,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":103,"column":28,"nodeType":"910","messageId":"911","endLine":103,"endColumn":30},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"960","line":11,"column":8,"nodeType":"904","messageId":"905","endLine":11,"endColumn":14},{"ruleId":"902","severity":1,"message":"961","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":28},{"ruleId":"902","severity":1,"message":"962","line":14,"column":8,"nodeType":"904","messageId":"905","endLine":14,"endColumn":33},{"ruleId":"902","severity":1,"message":"963","line":28,"column":18,"nodeType":"904","messageId":"905","endLine":28,"endColumn":27},{"ruleId":"902","severity":1,"message":"930","line":58,"column":9,"nodeType":"904","messageId":"905","endLine":58,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":61,"column":17,"nodeType":"910","messageId":"911","endLine":61,"endColumn":19},{"ruleId":"931","severity":1,"message":"964","line":78,"column":6,"nodeType":"933","endLine":78,"endColumn":8,"suggestions":"1003"},{"ruleId":"908","severity":1,"message":"909","line":80,"column":24,"nodeType":"910","messageId":"911","endLine":80,"endColumn":26},{"ruleId":"908","severity":1,"message":"909","line":82,"column":23,"nodeType":"910","messageId":"911","endLine":82,"endColumn":25},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"950","line":18,"column":8,"nodeType":"904","messageId":"905","endLine":18,"endColumn":20},{"ruleId":"902","severity":1,"message":"951","line":21,"column":8,"nodeType":"904","messageId":"905","endLine":21,"endColumn":16},{"ruleId":"902","severity":1,"message":"952","line":22,"column":8,"nodeType":"904","messageId":"905","endLine":22,"endColumn":14},{"ruleId":"902","severity":1,"message":"953","line":23,"column":10,"nodeType":"904","messageId":"905","endLine":23,"endColumn":20},{"ruleId":"902","severity":1,"message":"937","line":30,"column":19,"nodeType":"904","messageId":"905","endLine":30,"endColumn":27},{"ruleId":"902","severity":1,"message":"954","line":39,"column":20,"nodeType":"904","messageId":"905","endLine":39,"endColumn":29},{"ruleId":"902","severity":1,"message":"930","line":71,"column":13,"nodeType":"904","messageId":"905","endLine":71,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":74,"column":23,"nodeType":"910","messageId":"911","endLine":74,"endColumn":25},{"ruleId":"902","severity":1,"message":"955","line":92,"column":13,"nodeType":"904","messageId":"905","endLine":92,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":95,"column":22,"nodeType":"910","messageId":"911","endLine":95,"endColumn":24},{"ruleId":"902","severity":1,"message":"956","line":102,"column":11,"nodeType":"904","messageId":"905","endLine":102,"endColumn":32},{"ruleId":"931","severity":1,"message":"938","line":108,"column":8,"nodeType":"933","endLine":108,"endColumn":10,"suggestions":"1004"},{"ruleId":"902","severity":1,"message":"958","line":110,"column":11,"nodeType":"904","messageId":"905","endLine":110,"endColumn":31},{"ruleId":"902","severity":1,"message":"959","line":114,"column":11,"nodeType":"904","messageId":"905","endLine":114,"endColumn":33},{"ruleId":"908","severity":1,"message":"909","line":140,"column":26,"nodeType":"910","messageId":"911","endLine":140,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":300,"column":47,"nodeType":"910","messageId":"911","endLine":300,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"936","line":20,"column":20,"nodeType":"904","messageId":"905","endLine":20,"endColumn":31},{"ruleId":"902","severity":1,"message":"963","line":21,"column":18,"nodeType":"904","messageId":"905","endLine":21,"endColumn":27},{"ruleId":"902","severity":1,"message":"972","line":31,"column":10,"nodeType":"904","messageId":"905","endLine":31,"endColumn":23},{"ruleId":"902","severity":1,"message":"973","line":31,"column":24,"nodeType":"904","messageId":"905","endLine":31,"endColumn":40},{"ruleId":"902","severity":1,"message":"966","line":60,"column":9,"nodeType":"904","messageId":"905","endLine":60,"endColumn":16},{"ruleId":"902","severity":1,"message":"930","line":65,"column":9,"nodeType":"904","messageId":"905","endLine":65,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":68,"column":17,"nodeType":"910","messageId":"911","endLine":68,"endColumn":19},{"ruleId":"931","severity":1,"message":"974","line":89,"column":6,"nodeType":"933","endLine":89,"endColumn":8,"suggestions":"1005"},{"ruleId":"908","severity":1,"message":"909","line":91,"column":21,"nodeType":"910","messageId":"911","endLine":91,"endColumn":23},{"ruleId":"976","severity":1,"message":"977","line":117,"column":28,"nodeType":"978","endLine":117,"endColumn":61},{"ruleId":"908","severity":1,"message":"909","line":122,"column":26,"nodeType":"910","messageId":"911","endLine":122,"endColumn":28},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"960","line":11,"column":8,"nodeType":"904","messageId":"905","endLine":11,"endColumn":14},{"ruleId":"902","severity":1,"message":"937","line":22,"column":18,"nodeType":"904","messageId":"905","endLine":22,"endColumn":26},{"ruleId":"902","severity":1,"message":"936","line":23,"column":19,"nodeType":"904","messageId":"905","endLine":23,"endColumn":30},{"ruleId":"902","severity":1,"message":"963","line":24,"column":17,"nodeType":"904","messageId":"905","endLine":24,"endColumn":26},{"ruleId":"902","severity":1,"message":"966","line":47,"column":9,"nodeType":"904","messageId":"905","endLine":47,"endColumn":16},{"ruleId":"908","severity":1,"message":"909","line":51,"column":17,"nodeType":"910","messageId":"911","endLine":51,"endColumn":19},{"ruleId":"908","severity":1,"message":"919","line":55,"column":19,"nodeType":"910","messageId":"911","endLine":55,"endColumn":21},{"ruleId":"967","severity":1,"message":"968","line":68,"column":9,"nodeType":"904","messageId":"969","endLine":68,"endColumn":18},{"ruleId":"902","severity":1,"message":"930","line":68,"column":9,"nodeType":"904","messageId":"905","endLine":68,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":71,"column":17,"nodeType":"910","messageId":"911","endLine":71,"endColumn":19},{"ruleId":"931","severity":1,"message":"970","line":92,"column":6,"nodeType":"933","endLine":92,"endColumn":8,"suggestions":"1006"},{"ruleId":"908","severity":1,"message":"909","line":94,"column":28,"nodeType":"910","messageId":"911","endLine":94,"endColumn":30},{"ruleId":"902","severity":1,"message":"913","line":1,"column":26,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"979","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":34},{"ruleId":"902","severity":1,"message":"930","line":84,"column":13,"nodeType":"904","messageId":"905","endLine":84,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":89,"column":23,"nodeType":"910","messageId":"911","endLine":89,"endColumn":25},{"ruleId":"902","severity":1,"message":"930","line":100,"column":13,"nodeType":"904","messageId":"905","endLine":100,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":104,"column":23,"nodeType":"910","messageId":"911","endLine":104,"endColumn":25},{"ruleId":"931","severity":1,"message":"980","line":131,"column":8,"nodeType":"933","endLine":131,"endColumn":10,"suggestions":"1007"},{"ruleId":"908","severity":1,"message":"909","line":133,"column":26,"nodeType":"910","messageId":"911","endLine":133,"endColumn":28},{"ruleId":"976","severity":1,"message":"977","line":150,"column":17,"nodeType":"978","endLine":150,"endColumn":51},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"937","line":29,"column":19,"nodeType":"904","messageId":"905","endLine":29,"endColumn":27},{"ruleId":"902","severity":1,"message":"988","line":38,"column":21,"nodeType":"904","messageId":"905","endLine":38,"endColumn":31},{"ruleId":"902","severity":1,"message":"930","line":70,"column":13,"nodeType":"904","messageId":"905","endLine":70,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":73,"column":23,"nodeType":"910","messageId":"911","endLine":73,"endColumn":25},{"ruleId":"902","severity":1,"message":"955","line":91,"column":13,"nodeType":"904","messageId":"905","endLine":91,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":94,"column":22,"nodeType":"910","messageId":"911","endLine":94,"endColumn":24},{"ruleId":"931","severity":1,"message":"938","line":107,"column":8,"nodeType":"933","endLine":107,"endColumn":10,"suggestions":"1008"},{"ruleId":"908","severity":1,"message":"909","line":139,"column":26,"nodeType":"910","messageId":"911","endLine":139,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":341,"column":47,"nodeType":"910","messageId":"911","endLine":341,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":26,"nodeType":"904","messageId":"905","endLine":1,"endColumn":30},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"982","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":14},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"979","line":19,"column":8,"nodeType":"904","messageId":"905","endLine":19,"endColumn":34},{"ruleId":"902","severity":1,"message":"937","line":45,"column":18,"nodeType":"904","messageId":"905","endLine":45,"endColumn":26},{"ruleId":"902","severity":1,"message":"936","line":47,"column":21,"nodeType":"904","messageId":"905","endLine":47,"endColumn":32},{"ruleId":"902","severity":1,"message":"930","line":75,"column":13,"nodeType":"904","messageId":"905","endLine":75,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":78,"column":23,"nodeType":"910","messageId":"911","endLine":78,"endColumn":25},{"ruleId":"908","severity":1,"message":"919","line":86,"column":45,"nodeType":"910","messageId":"911","endLine":86,"endColumn":47},{"ruleId":"908","severity":1,"message":"909","line":102,"column":17,"nodeType":"910","messageId":"911","endLine":102,"endColumn":19},{"ruleId":"908","severity":1,"message":"909","line":107,"column":22,"nodeType":"910","messageId":"911","endLine":107,"endColumn":24},{"ruleId":"967","severity":1,"message":"983","line":116,"column":13,"nodeType":"904","messageId":"969","endLine":116,"endColumn":22},{"ruleId":"902","severity":1,"message":"955","line":116,"column":13,"nodeType":"904","messageId":"905","endLine":116,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":120,"column":22,"nodeType":"910","messageId":"911","endLine":120,"endColumn":24},{"ruleId":"902","severity":1,"message":"984","line":131,"column":11,"nodeType":"904","messageId":"905","endLine":131,"endColumn":32},{"ruleId":"902","severity":1,"message":"930","line":133,"column":13,"nodeType":"904","messageId":"905","endLine":133,"endColumn":22},{"ruleId":"908","severity":1,"message":"919","line":136,"column":23,"nodeType":"910","messageId":"911","endLine":136,"endColumn":25},{"ruleId":"931","severity":1,"message":"980","line":153,"column":8,"nodeType":"933","endLine":153,"endColumn":10,"suggestions":"1009"},{"ruleId":"908","severity":1,"message":"909","line":175,"column":26,"nodeType":"910","messageId":"911","endLine":175,"endColumn":28},{"ruleId":"976","severity":1,"message":"977","line":192,"column":17,"nodeType":"978","endLine":192,"endColumn":46},{"ruleId":"908","severity":1,"message":"909","line":307,"column":47,"nodeType":"910","messageId":"911","endLine":307,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":350,"column":47,"nodeType":"910","messageId":"911","endLine":350,"endColumn":49},{"ruleId":"908","severity":1,"message":"909","line":392,"column":47,"nodeType":"910","messageId":"911","endLine":392,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"986","line":1,"column":33,"nodeType":"904","messageId":"905","endLine":1,"endColumn":42},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"962","line":17,"column":8,"nodeType":"904","messageId":"905","endLine":17,"endColumn":33},{"ruleId":"902","severity":1,"message":"922","line":19,"column":8,"nodeType":"904","messageId":"905","endLine":19,"endColumn":18},{"ruleId":"902","severity":1,"message":"987","line":25,"column":8,"nodeType":"904","messageId":"905","endLine":25,"endColumn":17},{"ruleId":"908","severity":1,"message":"919","line":85,"column":22,"nodeType":"910","messageId":"911","endLine":85,"endColumn":24},{"ruleId":"902","severity":1,"message":"955","line":91,"column":13,"nodeType":"904","messageId":"905","endLine":91,"endColumn":22},{"ruleId":"908","severity":1,"message":"909","line":94,"column":22,"nodeType":"910","messageId":"911","endLine":94,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":159,"column":26,"nodeType":"910","messageId":"911","endLine":159,"endColumn":28},{"ruleId":"908","severity":1,"message":"909","line":191,"column":58,"nodeType":"910","messageId":"911","endLine":191,"endColumn":60},{"ruleId":"908","severity":1,"message":"909","line":191,"column":81,"nodeType":"910","messageId":"911","endLine":191,"endColumn":83},{"ruleId":"908","severity":1,"message":"909","line":209,"column":59,"nodeType":"910","messageId":"911","endLine":209,"endColumn":61},{"ruleId":"908","severity":1,"message":"909","line":209,"column":83,"nodeType":"910","messageId":"911","endLine":209,"endColumn":85},{"ruleId":"908","severity":1,"message":"909","line":226,"column":57,"nodeType":"910","messageId":"911","endLine":226,"endColumn":59},{"ruleId":"908","severity":1,"message":"909","line":226,"column":79,"nodeType":"910","messageId":"911","endLine":226,"endColumn":81},{"ruleId":"908","severity":1,"message":"909","line":243,"column":54,"nodeType":"910","messageId":"911","endLine":243,"endColumn":56},{"ruleId":"908","severity":1,"message":"909","line":243,"column":73,"nodeType":"910","messageId":"911","endLine":243,"endColumn":75},{"ruleId":"908","severity":1,"message":"909","line":264,"column":57,"nodeType":"910","messageId":"911","endLine":264,"endColumn":59},{"ruleId":"908","severity":1,"message":"909","line":264,"column":79,"nodeType":"910","messageId":"911","endLine":264,"endColumn":81},{"ruleId":"908","severity":1,"message":"909","line":287,"column":57,"nodeType":"910","messageId":"911","endLine":287,"endColumn":59},{"ruleId":"908","severity":1,"message":"909","line":287,"column":75,"nodeType":"910","messageId":"911","endLine":287,"endColumn":77},{"ruleId":"908","severity":1,"message":"909","line":305,"column":64,"nodeType":"910","messageId":"911","endLine":305,"endColumn":66},{"ruleId":"908","severity":1,"message":"909","line":305,"column":86,"nodeType":"910","messageId":"911","endLine":305,"endColumn":88},{"ruleId":"908","severity":1,"message":"909","line":322,"column":65,"nodeType":"910","messageId":"911","endLine":322,"endColumn":67},{"ruleId":"908","severity":1,"message":"909","line":322,"column":95,"nodeType":"910","messageId":"911","endLine":322,"endColumn":97},{"ruleId":"908","severity":1,"message":"909","line":335,"column":47,"nodeType":"910","messageId":"911","endLine":335,"endColumn":49},{"ruleId":"902","severity":1,"message":"913","line":1,"column":27,"nodeType":"904","messageId":"905","endLine":1,"endColumn":31},{"ruleId":"902","severity":1,"message":"948","line":2,"column":8,"nodeType":"904","messageId":"905","endLine":2,"endColumn":31},{"ruleId":"902","severity":1,"message":"949","line":3,"column":8,"nodeType":"904","messageId":"905","endLine":3,"endColumn":17},{"ruleId":"902","severity":1,"message":"982","line":4,"column":8,"nodeType":"904","messageId":"905","endLine":4,"endColumn":14},{"ruleId":"902","severity":1,"message":"914","line":8,"column":8,"nodeType":"904","messageId":"905","endLine":8,"endColumn":24},{"ruleId":"902","severity":1,"message":"915","line":9,"column":8,"nodeType":"904","messageId":"905","endLine":9,"endColumn":16},{"ruleId":"902","severity":1,"message":"907","line":10,"column":8,"nodeType":"904","messageId":"905","endLine":10,"endColumn":12},{"ruleId":"902","severity":1,"message":"916","line":12,"column":8,"nodeType":"904","messageId":"905","endLine":12,"endColumn":11},{"ruleId":"902","severity":1,"message":"924","line":13,"column":8,"nodeType":"904","messageId":"905","endLine":13,"endColumn":24},{"ruleId":"902","severity":1,"message":"979","line":19,"column":8,"nodeType":"904","messageId":"905","endLine":19,"endColumn":34},{"ruleId":"902","severity":1,"message":"990","line":22,"column":22,"nodeType":"904","messageId":"905","endLine":22,"endColumn":30},{"ruleId":"902","severity":1,"message":"936","line":39,"column":20,"nodeType":"904","messageId":"905","endLine":39,"endColumn":31},{"ruleId":"902","severity":1,"message":"963","line":40,"column":18,"nodeType":"904","messageId":"905","endLine":40,"endColumn":27},{"ruleId":"902","severity":1,"message":"991","line":41,"column":21,"nodeType":"904","messageId":"905","endLine":41,"endColumn":33},{"ruleId":"902","severity":1,"message":"955","line":130,"column":9,"nodeType":"904","messageId":"905","endLine":130,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":133,"column":16,"nodeType":"910","messageId":"911","endLine":133,"endColumn":18},{"ruleId":"902","severity":1,"message":"992","line":161,"column":9,"nodeType":"904","messageId":"905","endLine":161,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":164,"column":17,"nodeType":"910","messageId":"911","endLine":164,"endColumn":19},{"ruleId":"902","severity":1,"message":"993","line":174,"column":9,"nodeType":"904","messageId":"905","endLine":174,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":177,"column":17,"nodeType":"910","messageId":"911","endLine":177,"endColumn":19},{"ruleId":"902","severity":1,"message":"994","line":181,"column":9,"nodeType":"904","messageId":"905","endLine":181,"endColumn":18},{"ruleId":"908","severity":1,"message":"909","line":184,"column":17,"nodeType":"910","messageId":"911","endLine":184,"endColumn":19},{"ruleId":"902","severity":1,"message":"930","line":194,"column":9,"nodeType":"904","messageId":"905","endLine":194,"endColumn":18},{"ruleId":"908","severity":1,"message":"919","line":197,"column":17,"nodeType":"910","messageId":"911","endLine":197,"endColumn":19},{"ruleId":"931","severity":1,"message":"995","line":218,"column":6,"nodeType":"933","endLine":218,"endColumn":8,"suggestions":"1010"},{"ruleId":"908","severity":1,"message":"909","line":221,"column":22,"nodeType":"910","messageId":"911","endLine":221,"endColumn":24},{"ruleId":"908","severity":1,"message":"909","line":227,"column":13,"nodeType":"910","messageId":"911","endLine":227,"endColumn":15},{"ruleId":"976","severity":1,"message":"977","line":234,"column":11,"nodeType":"978","endLine":234,"endColumn":40},{"ruleId":"908","severity":1,"message":"909","line":448,"column":33,"nodeType":"910","messageId":"911","endLine":448,"endColumn":35},{"ruleId":"908","severity":1,"message":"909","line":477,"column":18,"nodeType":"910","messageId":"911","endLine":477,"endColumn":20},{"ruleId":"976","severity":1,"message":"977","line":483,"column":11,"nodeType":"978","endLine":483,"endColumn":40},{"ruleId":"976","severity":1,"message":"977","line":700,"column":11,"nodeType":"978","endLine":700,"endColumn":40},{"ruleId":"967","severity":1,"message":"997","line":3,"column":9,"nodeType":"904","messageId":"969","endLine":3,"endColumn":12},"no-native-reassign",["1011"],"no-negated-in-lhs",["1012"],"no-unused-vars","'RegistrationForm' is defined but never used.","Identifier","unusedVar","'CreateBadgeForm' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'Text' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'middleName' is assigned a value but never used.","'handleMiddleNameChange' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'handleReset' is assigned a value but never used.","'formatTimeStamp' is defined but never used.","'formatDate' is defined but never used.","'Button' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'CardActions' is defined but never used.","'LabelImportantIcon' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'response1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'assertionId' and 'handleviewAssertionById'. Either include them or remove the dependency array.","ArrayExpression",["1013"],"'useDebugValue' is defined but never used.","'setUserType' is assigned a value but never used.","'setEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewUserByEmail'. Either include it or remove the dependency array.",["1014"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'CameraIcon' is defined but never used.","'setuserID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBackpackAssertions'. Either include it or remove the dependency array.",["1015"],"'cards' is assigned a value but never used.","'getRegistrationResponse' is defined but never used.","'LoginForm' is defined but never used.","'ViewUserForm' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'InputLabel' is defined but never used.","'setUserId' is assigned a value but never used.","'response2' is assigned a value but never used.","'handleBackButtonClick' is assigned a value but never used.",["1016"],"'handleUserTypeChange' is assigned a value but never used.","'handleUserStatusChange' is assigned a value but never used.","'Hidden' is defined but never used.","'AssertionDetailsForm' is defined but never used.","'UserDetailByEmailResponse' is defined but never used.","'setUserID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewUsers'. Either include it or remove the dependency array.",["1017"],"'classes' is assigned a value but never used.","no-redeclare","'response1' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'handleviewAssertions'. Either include it or remove the dependency array.",["1018"],"'passwordClick' is assigned a value but never used.","'setPasswordClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBadge'. Either include it or remove the dependency array.",["1019"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CardMembershipOutlinedIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'handleviewAssertionById'. Either include it or remove the dependency array.",["1020"],"'Avatar' is defined but never used.","'response2' is already defined.","'handleviewUserByEmail' is assigned a value but never used.",["1021"],"'useEffect' is defined but never used.","'userEvent' is defined but never used.","'setAdminId' is assigned a value but never used.",["1022"],"'StepIcon' is defined but never used.","'setClickType' is assigned a value but never used.","'response3' is assigned a value but never used.","'response4' is assigned a value but never used.","'response5' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBadgeByName'. Either include it or remove the dependency array.",["1023"],"'url' is already defined.",["1011"],["1012"],["1024"],["1025"],["1026"],["1027"],["1028"],["1029"],["1030"],["1031"],["1032"],["1033"],["1034"],"no-global-assign","no-unsafe-negation",{"desc":"1035","fix":"1036"},{"desc":"1037","fix":"1038"},{"desc":"1039","fix":"1040"},{"desc":"1037","fix":"1041"},{"desc":"1042","fix":"1043"},{"desc":"1044","fix":"1045"},{"desc":"1046","fix":"1047"},{"desc":"1048","fix":"1049"},{"desc":"1048","fix":"1050"},{"desc":"1037","fix":"1051"},{"desc":"1052","fix":"1053"},{"desc":"1035","fix":"1054"},{"desc":"1037","fix":"1055"},{"desc":"1039","fix":"1056"},{"desc":"1042","fix":"1057"},{"desc":"1037","fix":"1058"},{"desc":"1046","fix":"1059"},{"desc":"1044","fix":"1060"},{"desc":"1048","fix":"1061"},{"desc":"1037","fix":"1062"},{"desc":"1048","fix":"1063"},{"desc":"1052","fix":"1064"},"Update the dependencies array to be: [assertionId, handleviewAssertionById]",{"range":"1065","text":"1066"},"Update the dependencies array to be: [handleviewUserByEmail]",{"range":"1067","text":"1068"},"Update the dependencies array to be: [handleviewBackpackAssertions]",{"range":"1069","text":"1070"},{"range":"1071","text":"1068"},"Update the dependencies array to be: [handleviewUsers]",{"range":"1072","text":"1073"},"Update the dependencies array to be: [handleviewAssertions]",{"range":"1074","text":"1075"},"Update the dependencies array to be: [handleviewBadge]",{"range":"1076","text":"1077"},"Update the dependencies array to be: [handleviewAssertionById]",{"range":"1078","text":"1079"},{"range":"1080","text":"1079"},{"range":"1081","text":"1068"},"Update the dependencies array to be: [handleviewBadgeByName]",{"range":"1082","text":"1083"},{"range":"1084","text":"1066"},{"range":"1085","text":"1068"},{"range":"1086","text":"1070"},{"range":"1087","text":"1073"},{"range":"1088","text":"1068"},{"range":"1089","text":"1077"},{"range":"1090","text":"1075"},{"range":"1091","text":"1079"},{"range":"1092","text":"1068"},{"range":"1093","text":"1079"},{"range":"1094","text":"1083"},[3882,3884],"[assertionId, handleviewAssertionById]",[10542,10544],"[handleviewUserByEmail]",[2875,2877],"[handleviewBackpackAssertions]",[4077,4079],[2845,2847],"[handleviewUsers]",[3059,3061],"[handleviewAssertions]",[2641,2643],"[handleviewBadge]",[4528,4530],"[handleviewAssertionById]",[5679,5681],[4076,4078],[7562,7564],"[handleviewBadgeByName]",[3882,3884],[10542,10544],[2875,2877],[2845,2847],[4077,4079],[2641,2643],[3059,3061],[4528,4530],[4076,4078],[5679,5681],[7562,7564]]

